!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
0	doxygen/html/search/searchdata.js	/^  0: "All",$/;"	p	class:indexSectionLabels
0	doxygen/html/search/searchdata.js	/^  0: "abcdefghilmnopqrstuvw~",$/;"	p	class:indexSectionsWithContent
0	doxygen/html/search/searchdata.js	/^  0: "all",$/;"	p	class:indexSectionNames
1	doxygen/html/search/searchdata.js	/^  1: "Classes",$/;"	p	class:indexSectionLabels
1	doxygen/html/search/searchdata.js	/^  1: "ceghnqrstvw",$/;"	p	class:indexSectionsWithContent
1	doxygen/html/search/searchdata.js	/^  1: "classes",$/;"	p	class:indexSectionNames
2	doxygen/html/search/searchdata.js	/^  2: "Namespaces",$/;"	p	class:indexSectionLabels
2	doxygen/html/search/searchdata.js	/^  2: "as",$/;"	p	class:indexSectionsWithContent
2	doxygen/html/search/searchdata.js	/^  2: "namespaces",$/;"	p	class:indexSectionNames
3	doxygen/html/search/searchdata.js	/^  3: "Files",$/;"	p	class:indexSectionLabels
3	doxygen/html/search/searchdata.js	/^  3: "acgnqrstw",$/;"	p	class:indexSectionsWithContent
3	doxygen/html/search/searchdata.js	/^  3: "files",$/;"	p	class:indexSectionNames
4	doxygen/html/search/searchdata.js	/^  4: "Functions",$/;"	p	class:indexSectionLabels
4	doxygen/html/search/searchdata.js	/^  4: "abcdefgimnopqrstuvw~",$/;"	p	class:indexSectionsWithContent
4	doxygen/html/search/searchdata.js	/^  4: "functions",$/;"	p	class:indexSectionNames
5	doxygen/html/search/searchdata.js	/^  5: "Variables",$/;"	p	class:indexSectionLabels
5	doxygen/html/search/searchdata.js	/^  5: "acdefghilmnopqrstuvw",$/;"	p	class:indexSectionsWithContent
5	doxygen/html/search/searchdata.js	/^  5: "variables",$/;"	p	class:indexSectionNames
6	doxygen/html/search/searchdata.js	/^  6: "Typedefs",$/;"	p	class:indexSectionLabels
6	doxygen/html/search/searchdata.js	/^  6: "acstv",$/;"	p	class:indexSectionsWithContent
6	doxygen/html/search/searchdata.js	/^  6: "typedefs",$/;"	p	class:indexSectionNames
7	doxygen/html/search/searchdata.js	/^  7: "Enumerations",$/;"	p	class:indexSectionLabels
7	doxygen/html/search/searchdata.js	/^  7: "enums",$/;"	p	class:indexSectionNames
7	doxygen/html/search/searchdata.js	/^  7: "for",$/;"	p	class:indexSectionsWithContent
8	doxygen/html/search/searchdata.js	/^  8: "Enumerator",$/;"	p	class:indexSectionLabels
8	doxygen/html/search/searchdata.js	/^  8: "enumvalues",$/;"	p	class:indexSectionNames
8	doxygen/html/search/searchdata.js	/^  8: "fmqu",$/;"	p	class:indexSectionsWithContent
9	doxygen/html/search/searchdata.js	/^  9: "Friends"$/;"	p	class:indexSectionLabels
9	doxygen/html/search/searchdata.js	/^  9: "gov"$/;"	p	class:indexSectionsWithContent
9	doxygen/html/search/searchdata.js	/^  9: "related"$/;"	p	class:indexSectionNames
APP_HPP_	src/app.hpp	2;"	d
Activate	doxygen/html/search/search.js	/^  this.Activate = function(isActive)$/;"	m	class:SearchBox
CCC	makefile	/^CCC = g++ -std=c++14 -pipe$/;"	m
CCFLAGS	makefile	/^debug: CCFLAGS = -O0 -g -Wall -Wextra -pedantic -Wdouble-promotion -Wshadow -Wfloat-equal -Wcast-align -Wcast-qual -Wwrite-strings -Wconversion -Wsign-conversion -Wuseless-cast -Wlogical-op -Wmissing-declarations -Wredundant-decls -Wdisabled-optimization -Wstack-protector -Winline -Wswitch-default -Wswitch-enum$/;"	m
CCFLAGS	makefile	/^default: CCFLAGS = -O2 -march=native$/;"	m
COMMANDLINEPARSER_HPP_	src/CommandLineParser.hpp	2;"	d
CloseResultsWindow	doxygen/html/search/search.js	/^  this.CloseResultsWindow = function()$/;"	m	class:SearchBox
CloseSelectionWindow	doxygen/html/search/search.js	/^  this.CloseSelectionWindow = function()$/;"	m	class:SearchBox
CommandLineParser	src/CommandLineParser.cpp	/^CommandLineParser::CommandLineParser(const int cardinality_, char **arguments_)$/;"	f	class:CommandLineParser
CommandLineParser	src/CommandLineParser.hpp	/^class CommandLineParser {$/;"	c
CommandLineParserAnalyzer	src/app.cpp	/^static unique_ptr<TxtMapParser> CommandLineParserAnalyzer($/;"	f	file:
DOMPopupSearchResults	doxygen/html/search/search.js	/^  this.DOMPopupSearchResults = function()$/;"	m	class:SearchBox
DOMPopupSearchResultsWindow	doxygen/html/search/search.js	/^  this.DOMPopupSearchResultsWindow = function()$/;"	m	class:SearchBox
DOMSearchBox	doxygen/html/search/search.js	/^  this.DOMSearchBox = function()$/;"	m	class:SearchBox
DOMSearchClose	doxygen/html/search/search.js	/^  this.DOMSearchClose = function()$/;"	m	class:SearchBox
DOMSearchField	doxygen/html/search/search.js	/^  this.DOMSearchField = function()$/;"	m	class:SearchBox
DOMSearchSelect	doxygen/html/search/search.js	/^  this.DOMSearchSelect = function()$/;"	m	class:SearchBox
DOMSearchSelectWindow	doxygen/html/search/search.js	/^  this.DOMSearchSelectWindow = function()$/;"	m	class:SearchBox
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
Edge	src/Graph.hpp	/^Edge<T>::Edge(Vertex<T>* from_, Vertex<T>* target_, double weight_,$/;"	f	class:Edge
Edge	src/Graph.hpp	/^class Edge {$/;"	c
FETCH_SUCCESS	src/WebFetch.hpp	/^  enum class Returns { FETCH_SUCCESS = 0, FETCH_NO_OVERWRITE };$/;"	m	class:WebFetch::Returns
Field	src/QueryFileParser.hpp	/^  enum class Field { URL = 0 };$/;"	c	class:QueryFileParser
FindChildElement	doxygen/html/search/search.js	/^    this.FindChildElement = function(id)$/;"	m	class:SearchResults
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
GRAPH_HPP_	src/Graph.hpp	2;"	d
GetCompilationInfoForFile	.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f
Graph	src/Graph.hpp	/^class Graph {$/;"	c
INCLUDES	makefile	/^INCLUDES = -I.\/src -I\/usr\/local\/include$/;"	m
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f
LIBS	makefile	/^LIBS = -L\/usr\/local\/lib -lboost_filesystem -lboost_system -lcurl -lcurlpp$/;"	m
MAP_GOAL_NODE	src/CommandLineParser.hpp	/^    MAP_GOAL_NODE,$/;"	m	class:CommandLineParser::Options
MAP_NODE_FILE_PATH	src/CommandLineParser.hpp	/^    MAP_NODE_FILE_PATH,$/;"	m	class:CommandLineParser::Options
MAP_ROAD_FILE_PATH	src/CommandLineParser.hpp	/^    MAP_ROAD_FILE_PATH,$/;"	m	class:CommandLineParser::Options
MAP_START_NODE	src/CommandLineParser.hpp	/^    MAP_START_NODE,$/;"	m	class:CommandLineParser::Options
MAP_SUBROADS_FILE_PATH	src/CommandLineParser.hpp	/^    MAP_SUBROADS_FILE_PATH,$/;"	m	class:CommandLineParser::Options
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f
NAVTREE	doxygen/html/navtreedata.js	/^var NAVTREE =$/;"	v
NAVTREEINDEX	doxygen/html/navtreedata.js	/^var NAVTREEINDEX =$/;"	v
NODE_HPP_	src/Node.hpp	2;"	d
Nav	doxygen/html/search/search.js	/^    this.Nav = function(evt,itemIndex)$/;"	m	class:SearchResults
NavChild	doxygen/html/search/search.js	/^    this.NavChild = function(evt,itemIndex,childIndex)$/;"	m	class:SearchResults
NavNext	doxygen/html/search/search.js	/^    this.NavNext = function(index)$/;"	m	class:SearchResults
NavPrev	doxygen/html/search/search.js	/^    this.NavPrev = function(index)$/;"	m	class:SearchResults
Node	src/Node.cpp	/^Node::Node(long long int id_, double lat_deg, double lon_deg, double lat_rad,$/;"	f	class:Node
Node	src/Node.hpp	/^class Node {$/;"	c
OBJ	makefile	/^OBJ = $(patsubst src%, .\/buildtemp%.o, $(SRC))$/;"	m
OUT	makefile	/^OUT = bin\/CAL1516T2GE$/;"	m
OnSearchFieldChange	doxygen/html/search/search.js	/^  this.OnSearchFieldChange = function(evt)$/;"	m	class:SearchBox
OnSearchFieldFocus	doxygen/html/search/search.js	/^  this.OnSearchFieldFocus = function(isActive)$/;"	m	class:SearchBox
OnSearchSelectHide	doxygen/html/search/search.js	/^  this.OnSearchSelectHide = function()$/;"	m	class:SearchBox
OnSearchSelectKey	doxygen/html/search/search.js	/^  this.OnSearchSelectKey = function(evt)$/;"	m	class:SearchBox
OnSearchSelectShow	doxygen/html/search/search.js	/^  this.OnSearchSelectShow = function()$/;"	m	class:SearchBox
OnSelectItem	doxygen/html/search/search.js	/^  this.OnSelectItem = function(id)$/;"	m	class:SearchBox
Options	src/CommandLineParser.hpp	/^  enum class Options {$/;"	c	class:CommandLineParser
ProcessKeys	doxygen/html/search/search.js	/^    this.ProcessKeys = function(e)$/;"	m	class:SearchResults
QUERYFILEPARSER_HPP_	src/QueryFileParser.hpp	2;"	d
QUERY_FILE_OUTPUT_PATH	src/CommandLineParser.hpp	/^    QUERY_FILE_OUTPUT_PATH,$/;"	m	class:CommandLineParser::Options
QUERY_FILE_PATH	src/CommandLineParser.hpp	/^    QUERY_FILE_PATH,$/;"	m	class:CommandLineParser::Options
QueryFileParser	src/QueryFileParser.hpp	/^QueryFileParser::QueryFileParser(string query_file_) : query_file{query_file_} {$/;"	f	class:QueryFileParser::QueryFileParser
QueryFileParser	src/QueryFileParser.hpp	/^class QueryFileParser {$/;"	c
ROAD_HPP_	src/Road.hpp	2;"	d
Returns	src/WebFetch.hpp	/^  enum class Returns { FETCH_SUCCESS = 0, FETCH_NO_OVERWRITE };$/;"	c	class:WebFetch
Road	src/Road.cpp	/^Road::Road(long long int id_, unique_ptr<string> name_, bool is_two_way_)$/;"	f	class:Road
Road	src/Road.hpp	/^class Road {$/;"	c
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
SRC	makefile	/^SRC = $(wildcard src\/*.cpp)$/;"	m
SUBROAD_HPP	src/Subroad.hpp	2;"	d
SYNCOFFMSG	doxygen/html/navtreedata.js	/^var SYNCOFFMSG = 'click to enable panel synchronisation';/;"	v
SYNCONMSG	doxygen/html/navtreedata.js	/^var SYNCONMSG = 'click to disable panel synchronisation';$/;"	v
Search	doxygen/html/search/search.js	/^    this.Search = function(search)$/;"	m	class:SearchResults
Search	doxygen/html/search/search.js	/^  this.Search = function()$/;"	m	class:SearchBox
SearchBox	doxygen/html/search/search.js	/^function SearchBox(name, resultsPath, inFrame, label)$/;"	c
SearchResults	doxygen/html/search/search.js	/^function SearchResults(name)$/;"	c
SelectItemCount	doxygen/html/search/search.js	/^  this.SelectItemCount = function(id)$/;"	m	class:SearchBox
SelectItemSet	doxygen/html/search/search.js	/^  this.SelectItemSet = function(id)$/;"	m	class:SearchBox
StringAlgorithms	src/StringAlgorithms.hpp	/^class StringAlgorithms {$/;"	c
Subroad	src/Subroad.cpp	/^Subroad::Subroad(long long int id_road_, long long int node_src,$/;"	f	class:Subroad
Subroad	src/Subroad.hpp	/^class Subroad {$/;"	c
TXTMAPPARSER_HPP_	src/TxtMapParser.hpp	2;"	d
Toggle	doxygen/html/search/search.js	/^    this.Toggle = function(id)$/;"	m	class:SearchResults
TxtMapParser	src/TxtMapParser.cpp	/^TxtMapParser::TxtMapParser(string const *const nodes_file_path_,$/;"	f	class:TxtMapParser
TxtMapParser	src/TxtMapParser.hpp	/^class TxtMapParser {$/;"	c
URL	src/QueryFileParser.hpp	/^  enum class Field { URL = 0 };$/;"	m	class:QueryFileParser::Field
Vertex	src/Graph.hpp	/^Vertex<T>::Vertex(T in)$/;"	f	class:Vertex
Vertex	src/Graph.hpp	/^class Vertex {$/;"	c
VertexCostGreaterThan	src/Graph.hpp	/^struct VertexCostGreaterThan {$/;"	s
VertexSetGreaterThan	src/Graph.hpp	/^struct VertexSetGreaterThan {$/;"	s
WEBFETCH_HPP_	src/WebFetch.hpp	2;"	d
WebFetch	src/WebFetch.cpp	/^WebFetch::WebFetch(string url_, string output_file_)$/;"	f	class:WebFetch
WebFetch	src/WebFetch.hpp	/^class WebFetch {$/;"	c
_command_line_parser_8cpp	doxygen/html/_command_line_parser_8cpp.js	/^var _command_line_parser_8cpp =$/;"	v
_command_line_parser_8cpp.html	doxygen/html/navtreeindex0.js	/^"_command_line_parser_8cpp.html":[2,0,0,2],$/;"	p	class:NAVTREEINDEX0
_node_8cpp	doxygen/html/_node_8cpp.js	/^var _node_8cpp =$/;"	v
_preventDefault	doxygen/html/resize.js	/^  var _preventDefault = function(evt) { evt.preventDefault(); };$/;"	f
_road_8cpp	doxygen/html/_road_8cpp.js	/^var _road_8cpp =$/;"	v
_subroad_8cpp	doxygen/html/_subroad_8cpp.js	/^var _subroad_8cpp =$/;"	v
a.onclick	doxygen/html/navtree.js	/^      a.onclick = function(){$/;"	f
addEdge	src/Graph.hpp	/^bool Graph<T>::addEdge(const T& in_origin, const T& in_target, double weight,$/;"	f	class:Graph
addEdge	src/Graph.hpp	/^void Vertex<T>::addEdge(Vertex<T>* target, double weight, Subroad* subroad_) {$/;"	f	class:Vertex
addVertex	src/Graph.hpp	/^bool Graph<T>::addVertex(const T& in) {$/;"	f	class:Graph
adjacency_list	src/Graph.hpp	/^  adjacency_list_t adjacency_list;$/;"	m	class:Vertex
animationInProgress	doxygen/html/navtree.js	/^var animationInProgress = false;$/;"	v
annotated_dup	doxygen/html/annotated_dup.js	/^var annotated_dup =$/;"	v
app	src/app.hpp	/^namespace app {$/;"	n
app_8cpp	doxygen/html/app_8cpp.js	/^var app_8cpp =$/;"	v
app_8hpp	doxygen/html/app_8hpp.js	/^var app_8hpp =$/;"	v
arguments	src/CommandLineParser.hpp	/^  char **arguments;$/;"	m	class:CommandLineParser
bfs	src/Graph.hpp	/^vector<T> Graph<T>::bfs(Vertex<T>* vertex) const {$/;"	f	class:Graph
buildGraph	src/app.cpp	/^static unique_ptr<Graph<Node>> buildGraph($/;"	f	file:
cachedLink	doxygen/html/navtree.js	/^function cachedLink()$/;"	f
cardinality	src/CommandLineParser.hpp	/^  int cardinality;$/;"	m	class:CommandLineParser
class_command_line_parser	doxygen/html/class_command_line_parser.js	/^var class_command_line_parser =$/;"	v
class_edge	doxygen/html/class_edge.js	/^var class_edge =$/;"	v
class_graph	doxygen/html/class_graph.js	/^var class_graph =$/;"	v
class_node	doxygen/html/class_node.js	/^var class_node =$/;"	v
class_query_file_parser	doxygen/html/class_query_file_parser.js	/^var class_query_file_parser =$/;"	v
class_road	doxygen/html/class_road.js	/^var class_road =$/;"	v
class_subroad	doxygen/html/class_subroad.js	/^var class_subroad =$/;"	v
class_txt_map_parser	doxygen/html/class_txt_map_parser.js	/^var class_txt_map_parser =$/;"	v
class_vertex	doxygen/html/class_vertex.js	/^var class_vertex =$/;"	v
class_web_fetch	doxygen/html/class_web_fetch.js	/^var class_web_fetch =$/;"	v
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
convertToId	doxygen/html/search/search.js	/^function convertToId(search)$/;"	f
cookie_namespace	doxygen/html/resize.js	/^var cookie_namespace = 'doxygen'; $/;"	v
coordinates_degrees	src/Node.hpp	/^  coordinates_t coordinates_degrees;$/;"	v
coordinates_radians	src/Node.hpp	/^  coordinates_t coordinates_radians;$/;"	v
cost	src/Graph.hpp	/^  double cost;$/;"	m	class:Vertex
cost_edge	src/Graph.hpp	/^  Edge<T>* cost_edge;$/;"	m	class:Vertex
createIndent	doxygen/html/navtree.js	/^function createIndent(o,domNode,node,level)$/;"	f
createResults	doxygen/html/search/search.js	/^function createResults()$/;"	f
cursorGrab	doxygen/html/svgpan.js	/^var cursorGrab = ' url("data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAMAAAAolt3jAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAAlQTFRFAAAA\/\/\/\/\/\/\/\/c3ilYwAAAAN0Uk5T\/\/8A18oNQQAAAD1JREFUeNp0zlEKACAIA9Bt9z90bZBZkQj29qFBEuBOzQHSnWTTyckEfqUuZgFvslH4ch3qLCO\/Kr8cAgwATw4Ax6XRCcoAAAAASUVORK5CYII="), move';$/;"	v
database	.ycm_extra_conf.py	/^  database = None$/;"	v
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
defaults	src/app.hpp	/^namespace defaults {$/;"	n	namespace:app
deleteLink	doxygen/html/navtree.js	/^function deleteLink()$/;"	f
destination	src/Subroad.hpp	/^    long long int destination;$/;"	m	class:Subroad
dfs	src/Graph.hpp	/^vector<T> Graph<T>::dfs() const {$/;"	f	class:Graph
dfs	src/Graph.hpp	/^void Graph<T>::dfs(Vertex<T>* vertex, vector<T>& path_history) const {$/;"	f	class:Graph
dijkstra	src/Graph.hpp	/^void Graph<T>::dijkstra(const T& in) {$/;"	f	class:Graph
dir_68267d1309a1af8e8297ef4c3efbcdba	doxygen/html/dir_68267d1309a1af8e8297ef4c3efbcdba.js	/^var dir_68267d1309a1af8e8297ef4c3efbcdba =$/;"	v
distance	src/Node.cpp	/^double Node::distance(const Node &otherNode) const {$/;"	f	class:Node
doZoom	doxygen/html/svgpan.js	/^function doZoom(g,point,zoomFactor)$/;"	f
dumpMatrix	doxygen/html/svgpan.js	/^function dumpMatrix(matrix) $/;"	f
dynamicProgrammingLevenshteinDistance	src/StringAlgorithms.cpp	/^int StringAlgorithms::dynamicProgrammingLevenshteinDistance(const string pattern, const string text) {$/;"	f	class:StringAlgorithms
edge_count	src/Graph.hpp	/^  long unsigned int edge_count = 0;$/;"	m	class:Graph
error	src/CommandLineParser.cpp	/^void CommandLineParser::error() { throw std::invalid_argument(this->help); }$/;"	f	class:CommandLineParser
error	src/CommandLineParser.cpp	/^void CommandLineParser::error(string error) {$/;"	f	class:CommandLineParser
expandNode	doxygen/html/navtree.js	/^function expandNode(o, node, imm, showRoot)$/;"	f
fetch	src/WebFetch.cpp	/^WebFetch::Returns WebFetch::fetch() {$/;"	f	class:WebFetch
files	doxygen/html/dir_68267d1309a1af8e8297ef4c3efbcdba.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doxygen/html/files.js	/^var files =$/;"	v
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
friends	doxygen/html/class_edge.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	doxygen/html/class_node.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	doxygen/html/class_road.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	doxygen/html/class_subroad.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	doxygen/html/class_vertex.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
from	src/Graph.hpp	/^  Vertex<T>* from;$/;"	m	class:Edge
func-members	doxygen/html/_node_8cpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func-members	doxygen/html/_road_8cpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func-members	doxygen/html/_subroad_8cpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func-members	doxygen/html/app_8cpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
generate_overpass_map_query	src/app.cpp	/^static string generate_overpass_map_query(list<Subroad *> &subroads_list) {$/;"	f	file:
get	src/QueryFileParser.hpp	/^auto& QueryFileParser::get() {$/;"	f	class:QueryFileParser::QueryFileParser
getAdjacencyList	src/Graph.hpp	/^typename Vertex<T>::adjacency_list_t Vertex<T>::getAdjacencyList() const {$/;"	f	class:Vertex
getCost	src/Graph.hpp	/^double Vertex<T>::getCost() const {$/;"	f	class:Vertex
getData	doxygen/html/navtree.js	/^function getData(varName)$/;"	f
getEdgeCount	src/Graph.hpp	/^long unsigned int Graph<T>::getEdgeCount() const {$/;"	f	class:Graph
getEventPoint	doxygen/html/svgpan.js	/^function getEventPoint(evt) $/;"	f
getId	src/Node.cpp	/^long long int Node::getId() const { return this->id; }$/;"	f	class:Node
getId	src/Road.cpp	/^long long int Road::getId() const { return this->id; }$/;"	f	class:Road
getInfo	src/Graph.hpp	/^T Vertex<T>::getInfo() const {$/;"	f	class:Vertex
getNode	doxygen/html/navtree.js	/^function getNode(o, po)$/;"	f
getNodesId	src/Subroad.cpp	/^void Subroad::getNodesId(Subroad::segment_t &segment) const {$/;"	f	class:Subroad
getNodesPathTo	src/Graph.hpp	/^void Graph<T>::getNodesPathTo(const T& in, list<T>& path) {$/;"	f	class:Graph
getPath	src/Graph.hpp	/^Vertex<T>* Vertex<T>::getPath() const {$/;"	f	class:Vertex
getRoadId	src/Subroad.cpp	/^long long int Subroad::getRoadId() const { return this->id_road; }$/;"	f	class:Subroad
getScript	doxygen/html/navtree.js	/^function getScript(scriptName,func,show)$/;"	f
getSubroadsPathTo	src/Graph.hpp	/^void Graph<T>::getSubroadsPathTo(const T& in, list<Subroad*>& subroads_path) {$/;"	f	class:Graph
getTarget	src/Graph.hpp	/^Vertex<T>* Edge<T>::getTarget() const {$/;"	f	class:Edge
getVertex	src/Graph.hpp	/^Vertex<T>* Graph<T>::getVertex(const T& in,$/;"	f	class:Graph
getVertexCount	src/Graph.hpp	/^long unsigned int Graph<T>::getVertexCount() const {$/;"	f	class:Graph
getVertexSet	src/Graph.hpp	/^typename Graph<T>::VertexSet_t Graph<T>::getVertexSet() const {$/;"	f	class:Graph
getWeight	src/Graph.hpp	/^double Edge<T>::getWeight() const {$/;"	f	class:Edge
getXPos	doxygen/html/search/search.js	/^function getXPos(item)$/;"	f
getYPos	doxygen/html/search/search.js	/^function getYPos(item)$/;"	f
glowEffect	doxygen/html/navtree.js	/^function glowEffect(n,duration)$/;"	f
gotoAnchor	doxygen/html/navtree.js	/^function gotoAnchor(anchor,aname,updateLocation)$/;"	f
gotoNode	doxygen/html/navtree.js	/^function gotoNode(o,subIndex,root,hash,relpath)$/;"	f
graph_file	src/app.hpp	/^const string graph_file = "graph.out";$/;"	m	namespace:app::defaults
handleMouseDown	doxygen/html/svgpan.js	/^function handleMouseDown(evt) $/;"	f
handleMouseMove	doxygen/html/svgpan.js	/^function handleMouseMove(evt) $/;"	f
handleMouseUp	doxygen/html/svgpan.js	/^function handleMouseUp(evt) $/;"	f
handleMouseWheel	doxygen/html/svgpan.js	/^function handleMouseWheel(evt) $/;"	f
handlePan	doxygen/html/svgpan.js	/^function handlePan(x,y)$/;"	f
handlePrint	doxygen/html/svgpan.js	/^function handlePrint(evt)$/;"	f
handleReset	doxygen/html/svgpan.js	/^function handleReset()$/;"	f
handleZoom	doxygen/html/svgpan.js	/^function handleZoom(evt,direction)$/;"	f
hash	src/CommandLineParser.hpp	/^struct hash {$/;"	s	namespace:std
hashUrl	doxygen/html/navtree.js	/^function hashUrl()$/;"	f
hashValue	doxygen/html/navtree.js	/^function hashValue()$/;"	f
help	src/CommandLineParser.hpp	/^  string help =$/;"	m	class:CommandLineParser
highlightAnchor	doxygen/html/navtree.js	/^function highlightAnchor()$/;"	f
id	src/Node.hpp	/^  const long long int id;$/;"	v
id	src/Road.hpp	/^  const long long int id;$/;"	m	class:Road
id_node_destination	src/Subroad.hpp	/^  const long long int id_node_destination;$/;"	m	class:Subroad
id_node_source	src/Subroad.hpp	/^  const long long int id_node_source;$/;"	m	class:Subroad
id_road	src/Subroad.hpp	/^  const long long int id_road;$/;"	m	class:Subroad
info	src/Graph.hpp	/^  T info;$/;"	m	class:Vertex
init	doxygen/html/svgpan.js	/^function init(evt) $/;"	f
initNavTree	doxygen/html/navtree.js	/^function initNavTree(toroot,relpath)$/;"	f
initResizable	doxygen/html/resize.js	/^function initResizable()$/;"	f
init_search	doxygen/html/search/search.js	/^function init_search()$/;"	f
isTwoWay	src/Road.cpp	/^bool Road::isTwoWay() const { return this->is_two_way; }$/;"	f	class:Road
is_two_way	src/Road.hpp	/^  bool is_two_way;$/;"	m	class:Road
knuthMorrisPratt	src/StringAlgorithms.cpp	/^int StringAlgorithms::knuthMorrisPratt(const string pattern,$/;"	f	class:StringAlgorithms
knuthMorrisPrattBuildPiTable	src/StringAlgorithms.cpp	/^void StringAlgorithms::knuthMorrisPrattBuildPiTable(const string pattern,$/;"	f	class:StringAlgorithms
l00001	doxygen/html/_command_line_parser_8hpp_source.html	/^<a href="_command_line_parser_8hpp.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef COMMANDLINEPARSER_HPP_<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define COMMANDLINEPARSER_HPP_<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;initializer_list&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_web_fetch_8hpp.html">WebFetch.hpp<\/a>&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">using<\/span> std::string;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">using<\/span> std::unordered_map;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno"><a class="line" href="namespacestd.html">   13<\/a><\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacestd.html">std<\/a> {<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> E&gt;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno"><a class="line" href="structstd_1_1hash.html">   15<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structstd_1_1hash.html">hash<\/a> {<\/div><div class="line"><a name="l00016"><\/a><span class="lineno"><a class="line" href="structstd_1_1hash.html#a78bcf1fe4211e81fdf9f027f2f42a402">   16<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">typename<\/span> std::enable_if_t&lt;std::is_enum&lt;E&gt;::value, <span class="keywordtype">int<\/span>&gt; <a class="code" href="structstd_1_1hash.html#a78bcf1fe4211e81fdf9f027f2f42a402">operator()<\/a>(<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;      E <span class="keyword">const<\/span> value)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">static_cast&lt;<\/span>typename std::underlying_type_t&lt;E&gt;<span class="keyword">&gt;<\/span>(value);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;  }<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;};<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;}<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="class_command_line_parser.html">   23<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="class_command_line_parser.html">CommandLineParser<\/a> {<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160; <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00025"><\/a><span class="lineno"><a class="line" href="class_command_line_parser.html#a9d7493f68b6b5c79b194e17352b6c9fb">   25<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="class_command_line_parser.html#a9d7493f68b6b5c79b194e17352b6c9fb">cardinality<\/a>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno"><a class="line" href="class_command_line_parser.html#ab62f3f56580442c36c08beb33430b6e7">   26<\/a><\/span>&#160;  <span class="keywordtype">char<\/span> **<a class="code" href="class_command_line_parser.html#ab62f3f56580442c36c08beb33430b6e7">arguments<\/a>;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno"><a class="line" href="class_command_line_parser.html#a1d3b66c4a916305eb6286160763ee0f4">   27<\/a><\/span>&#160;  <span class="keywordtype">string<\/span> help =<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;      <span class="stringliteral">&quot;( (--queryfile|-qf) queryfile [outputfile] ) | ( (--maptxtfiles|-mtf) &quot;<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;      <span class="stringliteral">&quot;in_nodesfile in_roadsfile in_waysfile in_start_node_id in_goal_node_id &quot;<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;      <span class="stringliteral">&quot;out_shortest_file&quot;<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;      <span class="stringliteral">&quot;)&quot;<\/span>;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;  <span class="keywordtype">void<\/span> error(<span class="keywordtype">string<\/span> error);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;  <span class="keywordtype">void<\/span> error();<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00037"><\/a><span class="lineno"><a class="line" href="class_command_line_parser.html#a2c7d72d60154e6ab814d461988e7d1a1">   37<\/a><\/span>&#160;  <span class="keyword">enum class<\/span> <a class="code" href="class_command_line_parser.html#a2c7d72d60154e6ab814d461988e7d1a1">Options<\/a> {<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    QUERY_FILE_PATH,<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    QUERY_FILE_OUTPUT_PATH,<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    MAP_NODE_FILE_PATH,<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    MAP_ROAD_FILE_PATH,<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    MAP_SUBROADS_FILE_PATH,<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    MAP_START_NODE,<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    MAP_GOAL_NODE,<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    MAP_SHORTEST_OVERPASS_FILE<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;  };<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;  <a class="code" href="class_command_line_parser.html">CommandLineParser<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> cardinality, <span class="keywordtype">char<\/span> **arguments);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  <span class="keywordtype">void<\/span> parse(unordered_map&lt;Options, string&gt; &amp;options);<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;};<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#endif <\/span><span class="comment">\/* COMMANDLINEPARSER_HPP_ *\/<\/span><span class="preprocessor"><\/span><\/div><div class="ttc" id="structstd_1_1hash_html_a78bcf1fe4211e81fdf9f027f2f42a402"><div class="ttname"><a href="structstd_1_1hash.html#a78bcf1fe4211e81fdf9f027f2f42a402">std::hash::operator()<\/a><\/div><div class="ttdeci">std::enable_if_t&lt; std::is_enum&lt; E &gt;::value, int &gt; operator()(E const value) const <\/div><div class="ttdef"><b>Definition:<\/b> CommandLineParser.hpp:16<\/div><\/div>$/;"	a
l00001	doxygen/html/_graph_8hpp_source.html	/^<a href="_graph_8hpp.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef GRAPH_HPP_<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define GRAPH_HPP_<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;queue&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;set&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;list&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_subroad_8hpp.html">Subroad.hpp<\/a>&quot;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno"><a class="line" href="class_edge.html">   14<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="class_edge.html">Edge<\/a>;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno"><a class="line" href="class_graph.html">   16<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="class_graph.html">Graph<\/a>;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">\/* VERTEX *\/<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno"><a class="line" href="class_vertex.html">   20<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="class_vertex.html">Vertex<\/a> {<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00022"><\/a><span class="lineno"><a class="line" href="class_vertex.html#a50f6c8308cfc317b3fdd89244325ed68">   22<\/a><\/span>&#160;  <span class="keyword">using<\/span> <a class="code" href="class_vertex.html#a50f6c8308cfc317b3fdd89244325ed68">adjacency_list_t<\/a> = vector&lt;Edge&lt;T&gt;&gt;;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160; <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00025"><\/a><span class="lineno"><a class="line" href="class_vertex.html#a415d7811eef6cdd992f0dca1f35a49cd">   25<\/a><\/span>&#160;  T <a class="code" href="class_vertex.html#a415d7811eef6cdd992f0dca1f35a49cd">info<\/a>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno"><a class="line" href="class_vertex.html#ae3ca72371926201ba54f91fdb4e1dc77">   26<\/a><\/span>&#160;  <a class="code" href="class_vertex.html#a50f6c8308cfc317b3fdd89244325ed68">adjacency_list_t<\/a> <a class="code" href="class_vertex.html#ae3ca72371926201ba54f91fdb4e1dc77">adjacency_list<\/a>;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno"><a class="line" href="class_vertex.html#a187a2fe4ff50261cf3c15b8cda7dfc56">   27<\/a><\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="class_vertex.html#a187a2fe4ff50261cf3c15b8cda7dfc56">visited<\/a>;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno"><a class="line" href="class_vertex.html#ae575d4b9a6b1ada3f9626c458c060f54">   28<\/a><\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="class_vertex.html#ae575d4b9a6b1ada3f9626c458c060f54">processing<\/a>;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno"><a class="line" href="class_vertex.html#aace8645699764bc319bcbd5c064c721e">   29<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="class_vertex.html#aace8645699764bc319bcbd5c064c721e">cost<\/a>;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno"><a class="line" href="class_vertex.html#a16289935aea137b06e45fd8455a1486b">   30<\/a><\/span>&#160;  <a class="code" href="class_edge.html">Edge&lt;T&gt;<\/a>* <a class="code" href="class_vertex.html#a16289935aea137b06e45fd8455a1486b">cost_edge<\/a>;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00033"><\/a><span class="lineno"><a class="line" href="class_vertex.html#aefa9b76cd57411c5354e5620dc2d84dd">   33<\/a><\/span>&#160;  <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="class_graph.html">Graph<\/a>&lt;T&gt;;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex<\/a>(T in);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;  <span class="keywordtype">bool<\/span> operator&lt;(const Vertex&lt;T&gt;&amp; vertex) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  <span class="keywordtype">bool<\/span> operator==(<span class="keyword">const<\/span> <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>&amp; vertex) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="class_graph.html#a975c2c86bf9bee00310f5a01cbc2f278">addEdge<\/a>(<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* dest, <span class="keywordtype">double<\/span> weight, <a class="code" href="class_subroad.html">Subroad<\/a>* subroad_);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;  <span class="keywordtype">bool<\/span> removeEdgeTo(<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a> <span class="keyword">const<\/span>* <span class="keyword">const<\/span> otherVertex);<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  T getInfo() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;  <span class="keywordtype">double<\/span> getCost() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;  <span class="keyword">typename<\/span> <a class="code" href="class_vertex.html#a50f6c8308cfc317b3fdd89244325ed68">Vertex&lt;T&gt;::adjacency_list_t<\/a> getAdjacencyList() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* getPath() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;};<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno"><a class="line" href="class_vertex.html#a549fd81a0700a1dadf219019b9ab86bd">   49<\/a><\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="class_vertex.html#a549fd81a0700a1dadf219019b9ab86bd">Vertex&lt;T&gt;::operator&lt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>&amp; vertex)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;  <span class="keywordflow">return<\/span> this-&gt;info &lt; vertex.<a class="code" href="class_vertex.html#a415d7811eef6cdd992f0dca1f35a49cd">info<\/a>;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;}<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno"><a class="line" href="class_vertex.html#ac3c6ed419335ce2a65e2fa4249cdbfbb">   54<\/a><\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="class_vertex.html#ac3c6ed419335ce2a65e2fa4249cdbfbb">Vertex&lt;T&gt;::operator==<\/a>(<span class="keyword">const<\/span> <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>&amp; vertex)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;  <span class="keywordflow">return<\/span> this-&gt;info == vertex.<a class="code" href="class_vertex.html#a415d7811eef6cdd992f0dca1f35a49cd">info<\/a>;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;}<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno"><a class="line" href="struct_vertex_cost_greater_than.html">   59<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="struct_vertex_cost_greater_than.html">VertexCostGreaterThan<\/a> {<\/div><div class="line"><a name="l00060"><\/a><span class="lineno"><a class="line" href="struct_vertex_cost_greater_than.html#ad03f5a378603915b0992069e900e4aed">   60<\/a><\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="struct_vertex_cost_greater_than.html#ad03f5a378603915b0992069e900e4aed">operator()<\/a>(<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a> <span class="keyword">const<\/span>* <span class="keyword">const<\/span> lVertex,<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;                  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a> <span class="keyword">const<\/span>* <span class="keyword">const<\/span> rVertex)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <span class="keywordflow">return<\/span> lVertex-&gt;<a class="code" href="class_vertex.html#ae2adb84339a46cd438d3619d79705ff2">getCost<\/a>() &gt; rVertex-&gt;<a class="code" href="class_vertex.html#ae2adb84339a46cd438d3619d79705ff2">getCost<\/a>();<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;  }<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;};<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno"><a class="line" href="class_vertex.html#a025ea00b38442715c5f49f6ab7285d7a">   67<\/a><\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="class_vertex.html#a025ea00b38442715c5f49f6ab7285d7a">Vertex&lt;T&gt;::removeEdgeTo<\/a>(<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a> <span class="keyword">const<\/span>* <span class="keyword">const<\/span> otherVertex) {<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;  <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span> it_edge = this-&gt;adjacency_list.begin();<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;       it_edge != this-&gt;adjacency_list.end(); ++it_edge) {<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordflow">if<\/span> (it_edge-&gt;target == otherVertex) {<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;      this-&gt;adjacency_list.erase(it_edge);<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;      <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    }<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;  }<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;  <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;}<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno"><a class="line" href="class_vertex.html#afcbdd4d4198b672356559cb8fa088408">   79<\/a><\/span>&#160;<a class="code" href="class_vertex.html#afcbdd4d4198b672356559cb8fa088408">Vertex&lt;T&gt;::Vertex<\/a>(T in)<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    : info{in}, <a class="code" href="class_vertex.html#a187a2fe4ff50261cf3c15b8cda7dfc56">visited<\/a>{<span class="keyword">false<\/span>}, <a class="code" href="class_vertex.html#ae575d4b9a6b1ada3f9626c458c060f54">processing<\/a>{<span class="keyword">false<\/span>}, <a class="code" href="class_vertex.html#aace8645699764bc319bcbd5c064c721e">cost<\/a>{0}, <a class="code" href="class_vertex.html#a16289935aea137b06e45fd8455a1486b">cost_edge<\/a>{NULL} {}<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno"><a class="line" href="class_vertex.html#a94a867d1fbefe01bb8cfe46c49f812f8">   83<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="class_vertex.html#a94a867d1fbefe01bb8cfe46c49f812f8">Vertex&lt;T&gt;::addEdge<\/a>(<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* target, <span class="keywordtype">double<\/span> weight, <a class="code" href="class_subroad.html">Subroad<\/a>* subroad_) {<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;  <a class="code" href="class_edge.html">Edge&lt;T&gt;<\/a> new_edge{<span class="keyword">this<\/span>, target, weight, subroad_};<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;  this-&gt;<a class="code" href="class_vertex.html#ae3ca72371926201ba54f91fdb4e1dc77">adjacency_list<\/a>.push_back(new_edge);<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;}<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno"><a class="line" href="class_vertex.html#a5880b4b252ae6818819c2f9645784b59">   89<\/a><\/span>&#160;T <a class="code" href="class_vertex.html#a5880b4b252ae6818819c2f9645784b59">Vertex&lt;T&gt;::getInfo<\/a>()<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;  <span class="keywordflow">return<\/span> this-&gt;<a class="code" href="class_vertex.html#a415d7811eef6cdd992f0dca1f35a49cd">info<\/a>;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;}<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno"><a class="line" href="class_vertex.html#ae2adb84339a46cd438d3619d79705ff2">   94<\/a><\/span>&#160;<span class="keywordtype">double<\/span> <a class="code" href="class_vertex.html#ae2adb84339a46cd438d3619d79705ff2">Vertex&lt;T&gt;::getCost<\/a>()<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;  <span class="keywordflow">return<\/span> this-&gt;<a class="code" href="class_vertex.html#aace8645699764bc319bcbd5c064c721e">cost<\/a>;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;}<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno"><a class="line" href="class_vertex.html#a48c98a22947159849c8c74995697ab3c">   99<\/a><\/span>&#160;<span class="keyword">typename<\/span> <a class="code" href="class_vertex.html#a50f6c8308cfc317b3fdd89244325ed68">Vertex&lt;T&gt;::adjacency_list_t<\/a> <a class="code" href="class_vertex.html#a48c98a22947159849c8c74995697ab3c">Vertex&lt;T&gt;::getAdjacencyList<\/a>()<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;  <span class="keywordflow">return<\/span> this-&gt;<a class="code" href="class_vertex.html#ae3ca72371926201ba54f91fdb4e1dc77">adjacency_list<\/a>;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;}<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno"><a class="line" href="class_vertex.html#ae0b57c953450db1679e5f5994e1ba738">  104<\/a><\/span>&#160;<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* <a class="code" href="class_vertex.html#ae0b57c953450db1679e5f5994e1ba738">Vertex&lt;T&gt;::getPath<\/a>()<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;  <span class="keywordflow">return<\/span> this-&gt;<a class="code" href="class_vertex.html#a16289935aea137b06e45fd8455a1486b">cost_edge<\/a>;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;}<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<span class="comment">\/* EDGE *\/<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="class_edge.html">Edge<\/a> {<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160; <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00112"><\/a><span class="lineno"><a class="line" href="class_edge.html#a4737cefe708560501ab0d771ce7493a3">  112<\/a><\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* <a class="code" href="class_edge.html#a4737cefe708560501ab0d771ce7493a3">from<\/a>;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno"><a class="line" href="class_edge.html#a11fbbd1f19088e14e7c703735c73f3c9">  113<\/a><\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* <a class="code" href="class_edge.html#a11fbbd1f19088e14e7c703735c73f3c9">target<\/a>;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno"><a class="line" href="class_edge.html#af188b57b604f0d65e2da48733bd76426">  114<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="class_edge.html#af188b57b604f0d65e2da48733bd76426">weight<\/a>;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno"><a class="line" href="class_edge.html#a5cc0b0acbff2e2ab31d0bc2099426295">  115<\/a><\/span>&#160;  <a class="code" href="class_subroad.html">Subroad<\/a>* <a class="code" href="class_edge.html#a5cc0b0acbff2e2ab31d0bc2099426295">subroad<\/a>;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00118"><\/a><span class="lineno"><a class="line" href="class_edge.html#aefa9b76cd57411c5354e5620dc2d84dd">  118<\/a><\/span>&#160;  <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="class_graph.html">Graph<\/a>&lt;T&gt;;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno"><a class="line" href="class_edge.html#a2e120a12dec663fa334633b4f26cbed8">  119<\/a><\/span>&#160;  <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="class_vertex.html">Vertex<\/a>&lt;T&gt;;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;  <a class="code" href="class_edge.html">Edge<\/a>(<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* from_, <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* target_, <span class="keywordtype">double<\/span> weight_,<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;       <a class="code" href="class_subroad.html">Subroad<\/a>* subdroad_);<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  <span class="keywordtype">bool<\/span> operator&lt;(const Edge&lt;T&gt;&amp; otherEdge) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;  <span class="keywordtype">double<\/span> getWeight() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* getTarget() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;};<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno"><a class="line" href="class_edge.html#a93cfee6957078e31888dd34d80d1a9e6">  130<\/a><\/span>&#160;<a class="code" href="class_edge.html#a93cfee6957078e31888dd34d80d1a9e6">Edge&lt;T&gt;::Edge<\/a>(<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* from_, <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* target_, <span class="keywordtype">double<\/span> weight_,<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;              <a class="code" href="class_subroad.html">Subroad<\/a>* subroad_)<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    : from{from_}, <a class="code" href="class_edge.html#a11fbbd1f19088e14e7c703735c73f3c9">target<\/a>{target_}, <a class="code" href="class_edge.html#af188b57b604f0d65e2da48733bd76426">weight<\/a>{weight_}, <a class="code" href="class_edge.html#a5cc0b0acbff2e2ab31d0bc2099426295">subroad<\/a>{subroad_} {}<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno"><a class="line" href="class_edge.html#a78f814ec429f84cd7336402326ad4ea8">  135<\/a><\/span>&#160;<span class="keywordtype">double<\/span> <a class="code" href="class_edge.html#a78f814ec429f84cd7336402326ad4ea8">Edge&lt;T&gt;::getWeight<\/a>()<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;  <span class="keywordflow">return<\/span> this-&gt;<a class="code" href="class_edge.html#af188b57b604f0d65e2da48733bd76426">weight<\/a>;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;}<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno"><a class="line" href="class_edge.html#addd56a046c3e3e7f3f6ba91841fc7a2f">  140<\/a><\/span>&#160;<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* <a class="code" href="class_edge.html#addd56a046c3e3e7f3f6ba91841fc7a2f">Edge&lt;T&gt;::getTarget<\/a>()<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;  <span class="keywordflow">return<\/span> this-&gt;<a class="code" href="class_edge.html#a11fbbd1f19088e14e7c703735c73f3c9">target<\/a>;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;}<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno"><a class="line" href="class_edge.html#a42b232c2a1fde063da8a74bf013a98e2">  145<\/a><\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="class_edge.html#a42b232c2a1fde063da8a74bf013a98e2">Edge&lt;T&gt;::operator&lt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="class_edge.html">Edge&lt;T&gt;<\/a>&amp; otherEdge)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;  <span class="keywordflow">return<\/span> this-&gt;<a class="code" href="class_edge.html#af188b57b604f0d65e2da48733bd76426">weight<\/a> &lt; otherEdge.<a class="code" href="class_edge.html#af188b57b604f0d65e2da48733bd76426">weight<\/a>;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;}<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno"><a class="line" href="struct_vertex_set_greater_than.html">  150<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="struct_vertex_set_greater_than.html">VertexSetGreaterThan<\/a> {<\/div><div class="line"><a name="l00151"><\/a><span class="lineno"><a class="line" href="struct_vertex_set_greater_than.html#afaff270f90d4f33ec1efb017d1a7803b">  151<\/a><\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="struct_vertex_set_greater_than.html#afaff270f90d4f33ec1efb017d1a7803b">operator()<\/a>(<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a> <span class="keyword">const<\/span>* <span class="keyword">const<\/span> lhs,<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;                  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a> <span class="keyword">const<\/span>* <span class="keyword">const<\/span> rhs)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;    <span class="keywordflow">return<\/span> (*lhs &lt; *rhs);<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;  }<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;};<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="comment">\/* GRAPH *\/<\/span><\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="class_graph.html">Graph<\/a> {<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00161"><\/a><span class="lineno"><a class="line" href="class_graph.html#a2b5c8513007998d4267b8e721a35d710">  161<\/a><\/span>&#160;  <span class="keyword">using<\/span> <a class="code" href="class_graph.html#a2b5c8513007998d4267b8e721a35d710">VertexSet_t<\/a> = set&lt;Vertex&lt;T&gt;*, <a class="code" href="struct_vertex_set_greater_than.html">VertexSetGreaterThan&lt;T&gt;<\/a>&gt;;<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160; <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00164"><\/a><span class="lineno"><a class="line" href="class_graph.html#a776cfaee52b1fa1119bc08fb35ecc231">  164<\/a><\/span>&#160;  <a class="code" href="class_graph.html#a2b5c8513007998d4267b8e721a35d710">VertexSet_t<\/a> <a class="code" href="class_graph.html#a776cfaee52b1fa1119bc08fb35ecc231">vertexSet<\/a>;<\/div><div class="line"><a name="l00165"><\/a><span class="lineno"><a class="line" href="class_graph.html#a2af8cb5e5ce432d8dbe0bf6ec472fd34">  165<\/a><\/span>&#160;  <span class="keywordtype">long<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> edge_count = 0;<\/div><div class="line"><a name="l00166"><\/a><span class="lineno"><a class="line" href="class_graph.html#ad5cc402f1b24d30ae12ffc2622ffbd5f">  166<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="class_graph.html#ad5cc402f1b24d30ae12ffc2622ffbd5f">numCycles<\/a>;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;  <span class="keywordtype">void<\/span> dfs(<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* v, vector&lt;T&gt;&amp; path_history) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;  vector&lt;T&gt; dfs() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;  vector&lt;T&gt; bfs(<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* v) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;  <span class="keywordtype">void<\/span> dijkstra(<span class="keyword">const<\/span> T&amp; in);<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;  <span class="keywordtype">void<\/span> getNodesPathTo(<span class="keyword">const<\/span> T&amp; in, list&lt;T&gt;&amp; res);<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;  <span class="keywordtype">void<\/span> getSubroadsPathTo(<span class="keyword">const<\/span> T&amp; in, list&lt;Subroad*&gt;&amp; subroads_path);<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;  <span class="keywordtype">bool<\/span> addVertex(<span class="keyword">const<\/span> T&amp; in);<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;  <span class="keywordtype">bool<\/span> addEdge(<span class="keyword">const<\/span> T&amp; in_origin, <span class="keyword">const<\/span> T&amp; in_target, <span class="keywordtype">double<\/span> <a class="code" href="class_edge.html#af188b57b604f0d65e2da48733bd76426">weight<\/a>,<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;               <a class="code" href="class_subroad.html">Subroad<\/a>* subroad_);<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;  <span class="keywordtype">bool<\/span> removeVertex(<span class="keyword">const<\/span> T&amp; in);<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;  <span class="keywordtype">bool<\/span> removeEdge(<span class="keyword">const<\/span> T&amp; in_origin, <span class="keyword">const<\/span> T&amp; in_target);<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;  <span class="keyword">typename<\/span> <a class="code" href="class_graph.html#a2b5c8513007998d4267b8e721a35d710">Graph&lt;T&gt;::VertexSet_t<\/a> getVertexSet() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;  <span class="keywordtype">long<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> getVertexCount() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;  <span class="keywordtype">long<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> getEdgeCount() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* getVertex(<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;      <span class="keyword">const<\/span> T&amp; in, <span class="keyword">typename<\/span> <a class="code" href="class_graph.html">Graph&lt;T&gt;::VertexSet_t::iterator<\/a>* it_ptr = <span class="keyword">nullptr<\/span>,<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;      <span class="keywordtype">bool<\/span> erase = <span class="keyword">false<\/span>);<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;  vector&lt;Vertex&lt;T&gt;*&gt; getSources() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;  <span class="keywordtype">void<\/span> uniform_cost_search(<span class="keyword">const<\/span> T&amp; in, <span class="keyword">const<\/span> T&amp; goal);<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;};<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno"><a class="line" href="class_graph.html#a2126212aafc4fc4e25445acc0285a3ee">  194<\/a><\/span>&#160;<span class="keywordtype">long<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="class_graph.html#a2126212aafc4fc4e25445acc0285a3ee">Graph&lt;T&gt;::getVertexCount<\/a>()<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;  <span class="keywordflow">return<\/span> vertexSet.size();<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;}<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00198"><\/a><span class="lineno"><a class="line" href="class_graph.html#a891c04ba53818dfa0398bb3c07ef48b1">  198<\/a><\/span>&#160;<span class="keywordtype">long<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="class_graph.html#a891c04ba53818dfa0398bb3c07ef48b1">Graph&lt;T&gt;::getEdgeCount<\/a>()<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;  <span class="keywordflow">return<\/span> this-&gt;edge_count;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;}<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00202"><\/a><span class="lineno"><a class="line" href="class_graph.html#a4dff1d577afccd1dda7b124d7604cc23">  202<\/a><\/span>&#160;<span class="keyword">typename<\/span> <a class="code" href="class_graph.html#a2b5c8513007998d4267b8e721a35d710">Graph&lt;T&gt;::VertexSet_t<\/a> <a class="code" href="class_graph.html#a4dff1d577afccd1dda7b124d7604cc23">Graph&lt;T&gt;::getVertexSet<\/a>()<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;  <span class="keywordflow">return<\/span> vertexSet;<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;}<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno"><a class="line" href="class_graph.html#a00be284ea2be3b3d0f0d2e493b70245b">  207<\/a><\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="class_graph.html#a00be284ea2be3b3d0f0d2e493b70245b">Graph&lt;T&gt;::addVertex<\/a>(<span class="keyword">const<\/span> T&amp; in) {<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* new_vertex = <span class="keyword">new<\/span> <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>(in);<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;  <span class="keyword">auto<\/span> pair = this-&gt;vertexSet.insert(new_vertex);<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;  <span class="keywordflow">if<\/span> (!pair.second) {<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;    <span class="keyword">delete<\/span> new_vertex;<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;  }<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;  <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;}<\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;<\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00218"><\/a><span class="lineno"><a class="line" href="class_graph.html#af9c903104ad69a7782979fa9caedf163">  218<\/a><\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="class_graph.html#af9c903104ad69a7782979fa9caedf163">Graph&lt;T&gt;::removeVertex<\/a>(<span class="keyword">const<\/span> T&amp; in) {<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* vertex_info = this-&gt;getVertex(in, <span class="keyword">nullptr<\/span>, <span class="keyword">true<\/span>);<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;  <span class="keywordflow">if<\/span> (vertex_info == <span class="keyword">nullptr<\/span>) {<\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;  }<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;  <span class="keywordflow">for<\/span> (<span class="keyword">const<\/span> <span class="keyword">auto<\/span>&amp; vertex_ptr : this-&gt;vertexSet) {<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;    vertex_ptr-&gt;removeEdgeTo(vertex_info);<\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;  }<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;  <span class="keyword">delete<\/span> vertex_info;<\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;  <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;}<\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;<\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00233"><\/a><span class="lineno"><a class="line" href="class_graph.html#a975c2c86bf9bee00310f5a01cbc2f278">  233<\/a><\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="class_graph.html#a975c2c86bf9bee00310f5a01cbc2f278">Graph&lt;T&gt;::addEdge<\/a>(<span class="keyword">const<\/span> T&amp; in_origin, <span class="keyword">const<\/span> T&amp; in_target, <span class="keywordtype">double<\/span> <a class="code" href="class_edge.html#af188b57b604f0d65e2da48733bd76426">weight<\/a>,<\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;                       <a class="code" href="class_subroad.html">Subroad<\/a>* subroad_) {<\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* vertex_origin = this-&gt;getVertex(in_origin);<\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* vertex_target = this-&gt;getVertex(in_target);<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;  <span class="keywordflow">if<\/span> (vertex_origin == <span class="keyword">nullptr<\/span> || vertex_target == <span class="keyword">nullptr<\/span>) {<\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;  }<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;  vertex_origin-&gt;<a class="code" href="class_vertex.html#a94a867d1fbefe01bb8cfe46c49f812f8">addEdge<\/a>(vertex_target, weight, subroad_);<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;  this-&gt;edge_count++;<\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;  <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;}<\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00248"><\/a><span class="lineno"><a class="line" href="class_graph.html#ad4f83b5d27621e64c30d21f91f080ccf">  248<\/a><\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="class_graph.html#ad4f83b5d27621e64c30d21f91f080ccf">Graph&lt;T&gt;::removeEdge<\/a>(<span class="keyword">const<\/span> T&amp; in_origin, <span class="keyword">const<\/span> T&amp; in_target) {<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* vertex_origin = this-&gt;getVertex(in_origin);<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* vertex_target = this-&gt;getVertex(in_target);<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;  <span class="keywordflow">if<\/span> (vertex_origin == <span class="keyword">nullptr<\/span> || vertex_target == <span class="keyword">nullptr<\/span>) {<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;  }<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;  <span class="keywordflow">if<\/span> (!vertex_origin-&gt;<a class="code" href="class_vertex.html#a025ea00b38442715c5f49f6ab7285d7a">removeEdgeTo<\/a>(vertex_target)) {<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;  }<\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;<\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;  this-&gt;edge_count--;<\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;  <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;}<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00264"><\/a><span class="lineno"><a class="line" href="class_graph.html#a3f62ba0e37c5c011299c93d60e3a8be3">  264<\/a><\/span>&#160;vector&lt;T&gt; <a class="code" href="class_graph.html#a3f62ba0e37c5c011299c93d60e3a8be3">Graph&lt;T&gt;::dfs<\/a>()<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;  <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span>&amp; vertex_ptr : this-&gt;vertexSet) {<\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;    vertex_ptr-&gt;visited = <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;  }<\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;<\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;  vector&lt;T&gt; path_history;<\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;  <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span> vertex_ptr : this-&gt;vertexSet) {<\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;    <span class="keywordflow">if<\/span> (!vertex_ptr-&gt;visited) {<\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;      dfs(vertex_ptr, path_history);<\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;    }<\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;  }<\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;<\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;  <span class="keywordflow">return<\/span> path_history;<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;}<\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;<\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00280"><\/a><span class="lineno"><a class="line" href="class_graph.html#a51f11424acabe74d10d7f1bf124c7e43">  280<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="class_graph.html#a3f62ba0e37c5c011299c93d60e3a8be3">Graph&lt;T&gt;::dfs<\/a>(<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* vertex, vector&lt;T&gt;&amp; path_history)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;  vertex-&gt;<a class="code" href="class_vertex.html#a187a2fe4ff50261cf3c15b8cda7dfc56">visited<\/a> = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;  path_history.push_back(vertex-&gt;<a class="code" href="class_vertex.html#a415d7811eef6cdd992f0dca1f35a49cd">info<\/a>);<\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;  <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span>&amp; edge : this-&gt;adjacency_list) {<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;    <span class="keywordflow">if<\/span> (edge.target-&gt;visited == <span class="keyword">false<\/span>) {<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;      dfs(edge.target, path_history);<\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;    }<\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;  }<\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;}<\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;<\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00292"><\/a><span class="lineno"><a class="line" href="class_graph.html#a0e9598b98be2570eb432690411a577e8">  292<\/a><\/span>&#160;vector&lt;T&gt; <a class="code" href="class_graph.html#a0e9598b98be2570eb432690411a577e8">Graph&lt;T&gt;::bfs<\/a>(<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* vertex)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;  vector&lt;T&gt; path_history;<\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;  queue&lt;Vertex&lt;T&gt;*&gt; fringe;<\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;  fringe.push(vertex);<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;  vertex-&gt;<a class="code" href="class_vertex.html#a187a2fe4ff50261cf3c15b8cda7dfc56">visited<\/a> = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;<\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;  <span class="keywordflow">while<\/span> (!fringe.empty()) {<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;    <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* selected_vertex = fringe.front();<\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;    fringe.pop();<\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;    path_history.push_back(selected_vertex-&gt;<a class="code" href="class_vertex.html#a415d7811eef6cdd992f0dca1f35a49cd">info<\/a>);<\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;<\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span>&amp; edge : this-&gt;adjacency_list) {<\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;      <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* candidate_vertex = edge.target;<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;      <span class="keywordflow">if<\/span> (!candidate_vertex-&gt;<a class="code" href="class_vertex.html#a187a2fe4ff50261cf3c15b8cda7dfc56">visited<\/a>) {<\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;        candidate_vertex-&gt;<a class="code" href="class_vertex.html#a187a2fe4ff50261cf3c15b8cda7dfc56">visited<\/a> = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;        fringe.push(candidate_vertex);<\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;      }<\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;    }<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;  }<\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;  <span class="keywordflow">return<\/span> path_history;<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;}<\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;<\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00315"><\/a><span class="lineno"><a class="line" href="class_graph.html#a730f619f2de476287df95ae8e4827bec">  315<\/a><\/span>&#160;<a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* <a class="code" href="class_graph.html#a730f619f2de476287df95ae8e4827bec">Graph&lt;T&gt;::getVertex<\/a>(<span class="keyword">const<\/span> T&amp; in,<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;                               <span class="keyword">typename<\/span> <a class="code" href="class_graph.html">Graph&lt;T&gt;::VertexSet_t::iterator<\/a>* it_ptr,<\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;                               <span class="keywordtype">bool<\/span> erase) {<\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;  <span class="keyword">auto<\/span> vertex_in_search = make_shared&lt;Vertex&lt;T&gt;&gt;(in);<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;<\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;  <span class="keyword">auto<\/span> it_vertex_info = this-&gt;vertexSet.find(vertex_in_search.get());<\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;  <span class="keywordflow">if<\/span> (it_vertex_info == this-&gt;vertexSet.end()) {<\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;    <span class="keywordflow">if<\/span> (it_ptr != <span class="keyword">nullptr<\/span>) {<\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;      *it_ptr = this-&gt;vertexSet.end();<\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;    }<\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;    <span class="keywordflow">return<\/span> NULL;<\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;  }<\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;<\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;  <span class="keywordflow">if<\/span> (it_ptr != <span class="keyword">nullptr<\/span>) {<\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;    *it_ptr = it_vertex_info;<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;  }<\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* vertex_ptr = *it_vertex_info;<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;  <span class="keywordflow">if<\/span> (erase) {<\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;    <span class="keywordflow">if<\/span> (it_ptr != <span class="keyword">nullptr<\/span>) {<\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;      *it_ptr = this-&gt;vertexSet.end();<\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;    }<\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;    this-&gt;vertexSet.erase(it_vertex_info);<\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;  }<\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;  <span class="keywordflow">return<\/span> vertex_ptr;<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;}<\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00343"><\/a><span class="lineno"><a class="line" href="class_graph.html#a3129773fea02c4532bc206070e611ca9">  343<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="class_graph.html#a3129773fea02c4532bc206070e611ca9">Graph&lt;T&gt;::dijkstra<\/a>(<span class="keyword">const<\/span> T&amp; in) {<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;  <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span>&amp; vertex_ptr : this-&gt;vertexSet) {<\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;    vertex_ptr-&gt;cost_edge = NULL;<\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;    vertex_ptr-&gt;cost = std::numeric_limits&lt;double&gt;::max();<\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;    vertex_ptr-&gt;visited = <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;  }<\/div><div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;<\/div><div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* selected_vertex = this-&gt;getVertex(in);<\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;  <span class="keywordflow">if<\/span> (selected_vertex == <span class="keyword">nullptr<\/span>) {<\/div><div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;    <span class="keywordflow">return<\/span>;<\/div><div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;  }<\/div><div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;  selected_vertex-&gt;<a class="code" href="class_vertex.html#aace8645699764bc319bcbd5c064c721e">cost<\/a> = 0;<\/div><div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;<\/div><div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;  vector&lt;Vertex&lt;T&gt;*&gt; priority_queue;<\/div><div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;  priority_queue.push_back(selected_vertex);<\/div><div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;<\/div><div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;  make_heap(priority_queue.begin(), priority_queue.end());<\/div><div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;<\/div><div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;  <span class="keywordflow">while<\/span> (!priority_queue.empty()) {<\/div><div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;    selected_vertex = priority_queue.front();<\/div><div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;    pop_heap(priority_queue.begin(), priority_queue.end());<\/div><div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;    priority_queue.pop_back();<\/div><div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;<\/div><div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span>&amp; edge : selected_vertex-&gt;<a class="code" href="class_vertex.html#ae3ca72371926201ba54f91fdb4e1dc77">adjacency_list<\/a>) {<\/div><div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;      <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* <a class="code" href="class_edge.html#a11fbbd1f19088e14e7c703735c73f3c9">target<\/a> = edge.target;<\/div><div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;<\/div><div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;      <span class="keywordtype">double<\/span> new_target_cost = selected_vertex-&gt;<a class="code" href="class_vertex.html#aace8645699764bc319bcbd5c064c721e">cost<\/a> + edge.weight;<\/div><div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;      <span class="keywordflow">if<\/span> (new_target_cost &lt; target-&gt;cost) {<\/div><div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;        target-&gt;<a class="code" href="class_vertex.html#aace8645699764bc319bcbd5c064c721e">cost<\/a> = new_target_cost;<\/div><div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;        target-&gt;<a class="code" href="class_vertex.html#a16289935aea137b06e45fd8455a1486b">cost_edge<\/a> = &amp;edge;<\/div><div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;<\/div><div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;        <span class="keywordflow">if<\/span> (!target-&gt;<a class="code" href="class_vertex.html#a187a2fe4ff50261cf3c15b8cda7dfc56">visited<\/a>) {<\/div><div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;          target-&gt;<a class="code" href="class_vertex.html#a187a2fe4ff50261cf3c15b8cda7dfc56">visited<\/a> = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;          priority_queue.push_back(target);<\/div><div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;        }<\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;<\/div><div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;        make_heap(priority_queue.begin(), priority_queue.end(),<\/div><div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;                  <a class="code" href="struct_vertex_cost_greater_than.html">VertexCostGreaterThan&lt;T&gt;<\/a>());<\/div><div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;      }<\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;    }<\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;  }<\/div><div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;}<\/div><div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;<\/div><div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00387"><\/a><span class="lineno"><a class="line" href="class_graph.html#a41b41b0e366fa16b5c13950da9eb1b77">  387<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="class_graph.html#a41b41b0e366fa16b5c13950da9eb1b77">Graph&lt;T&gt;::getNodesPathTo<\/a>(<span class="keyword">const<\/span> T&amp; in, list&lt;T&gt;&amp; path) {<\/div><div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;  path.clear();<\/div><div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;<\/div><div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* goal_vertex = this-&gt;getVertex(in);<\/div><div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;  <span class="keywordflow">if<\/span> (goal_vertex == <span class="keyword">nullptr<\/span>) {<\/div><div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;    <span class="keywordflow">return<\/span>;<\/div><div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;  }<\/div><div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;<\/div><div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;  path.push_front(goal_vertex-&gt;<a class="code" href="class_vertex.html#a415d7811eef6cdd992f0dca1f35a49cd">info<\/a>);<\/div><div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;  <a class="code" href="class_edge.html">Edge&lt;T&gt;<\/a>* cost_edge = goal_vertex-&gt;<a class="code" href="class_vertex.html#a16289935aea137b06e45fd8455a1486b">cost_edge<\/a>;<\/div><div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;  <span class="keywordflow">while<\/span> (cost_edge != <span class="keyword">nullptr<\/span>) {<\/div><div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;    path.push_front(cost_edge-&gt;<a class="code" href="class_edge.html#a4737cefe708560501ab0d771ce7493a3">from<\/a>-&gt;info);<\/div><div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;    cost_edge = cost_edge-&gt;<a class="code" href="class_edge.html#a4737cefe708560501ab0d771ce7493a3">from<\/a>-&gt;cost_edge;<\/div><div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;  }<\/div><div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;}<\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;<\/div><div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00404"><\/a><span class="lineno"><a class="line" href="class_graph.html#acd3e99d34df8d1c6abeac9c815c81ffb">  404<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="class_graph.html#acd3e99d34df8d1c6abeac9c815c81ffb">Graph&lt;T&gt;::getSubroadsPathTo<\/a>(<span class="keyword">const<\/span> T&amp; in, list&lt;Subroad*&gt;&amp; subroads_path) {<\/div><div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;  subroads_path.clear();<\/div><div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;<\/div><div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;  <a class="code" href="class_vertex.html">Vertex&lt;T&gt;<\/a>* goal_vertex = this-&gt;getVertex(in);<\/div><div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;  <span class="keywordflow">if<\/span> (goal_vertex == <span class="keyword">nullptr<\/span>) {<\/div><div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;    <span class="keywordflow">return<\/span>;<\/div><div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;  }<\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;<\/div><div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;  <a class="code" href="class_edge.html">Edge&lt;T&gt;<\/a>* cost_edge = goal_vertex-&gt;<a class="code" href="class_vertex.html#a16289935aea137b06e45fd8455a1486b">cost_edge<\/a>;<\/div><div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;  <span class="keywordflow">while<\/span> (cost_edge != <span class="keyword">nullptr<\/span>) {<\/div><div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;    subroads_path.push_front(cost_edge-&gt;<a class="code" href="class_edge.html#a5cc0b0acbff2e2ab31d0bc2099426295">subroad<\/a>);<\/div><div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;    cost_edge = cost_edge-&gt;<a class="code" href="class_edge.html#a4737cefe708560501ab0d771ce7493a3">from<\/a>-&gt;cost_edge;<\/div><div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;  }<\/div><div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;}<\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;<\/div><div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;<span class="preprocessor">#endif <\/span><span class="comment">\/* GRAPH_HPP_ *\/<\/span><span class="preprocessor"><\/span><\/div><div class="ttc" id="class_vertex_html_ac3c6ed419335ce2a65e2fa4249cdbfbb"><div class="ttname"><a href="class_vertex.html#ac3c6ed419335ce2a65e2fa4249cdbfbb">Vertex::operator==<\/a><\/div><div class="ttdeci">bool operator==(const Vertex&lt; T &gt; &amp;vertex) const <\/div><div class="ttdef"><b>Definition:<\/b> Graph.hpp:54<\/div><\/div>$/;"	a
l00001	doxygen/html/_node_8hpp_source.html	/^<a href="_node_8hpp.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef NODE_HPP_<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define NODE_HPP_<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;utility&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">using<\/span> std::string;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">using<\/span> std::ostream;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">using<\/span> std::pair;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno"><a class="line" href="class_node.html">   11<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="class_node.html">Node<\/a> {<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160; <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;  <span class="keyword">using<\/span> <a class="code" href="class_node.html#a2afb66af69ac855252595b58bbeb9b34">coordinates_t<\/a> = <span class="keyword">struct <\/span>{<\/div><div class="line"><a name="l00014"><\/a><span class="lineno"><a class="line" href="class_node.html#a2afb66af69ac855252595b58bbeb9b34">   14<\/a><\/span>&#160;    <span class="keywordtype">double<\/span> latitude;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno"><a class="line" href="class_node.html#af1772ed9e687d1e230f21c8fdf955ee9">   15<\/a><\/span>&#160;    <span class="keywordtype">double<\/span> <a class="code" href="class_node.html#af1772ed9e687d1e230f21c8fdf955ee9">longitude<\/a>;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno"><a class="line" href="class_node.html#a8c4c3ae46d121231025279cf93deca84">   16<\/a><\/span>&#160;  };<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> <a class="code" href="class_node.html#a8c4c3ae46d121231025279cf93deca84">id<\/a>;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno"><a class="line" href="class_node.html#ab7bf11d406ac9cc7ded96f0dad3e23a1">   18<\/a><\/span>&#160;  <a class="code" href="class_node.html#a2afb66af69ac855252595b58bbeb9b34">coordinates_t<\/a> <a class="code" href="class_node.html#ab7bf11d406ac9cc7ded96f0dad3e23a1">coordinates_degrees<\/a>;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno"><a class="line" href="class_node.html#a2e44beccfdf3e40fb7bbb251c2969745">   19<\/a><\/span>&#160;  <a class="code" href="class_node.html#a2afb66af69ac855252595b58bbeb9b34">coordinates_t<\/a> <a class="code" href="class_node.html#a2e44beccfdf3e40fb7bbb251c2969745">coordinates_radians<\/a>;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;  <a class="code" href="class_node.html#a8409ea3091018c7f8ae04af8a47cdb83">Node<\/a>(<span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> id_, <span class="keywordtype">double<\/span> lat_deg, <span class="keywordtype">double<\/span> lon_deg, <span class="keywordtype">double<\/span> lat_rad,<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;       <span class="keywordtype">double<\/span> lon_rad);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="class_node.html#a10d1a37d2c40bacf822bd18cbef52e1f">operator==<\/a>(<span class="keyword">const<\/span> <a class="code" href="class_node.html">Node<\/a> &amp;otherNode) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="class_node.html#ab9b2dca87f230b993d7c5989eee34277">distance<\/a>(<span class="keyword">const<\/span> <a class="code" href="class_node.html">Node<\/a> &amp;otherNode) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="class_node.html#aaf2f91b998e0ed0119cd0130a211e059">operator&lt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="class_node.html">Node<\/a> &amp;otherNode) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> <a class="code" href="class_node.html#a0727d1af8c1684c0d4895cab7dca7e58">getId<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  <span class="keyword">friend<\/span> ostream &amp;<a class="code" href="class_node.html#a3643f41356d057aefe4866c3c47fe6a2">operator&lt;&lt;<\/a>(ostream &amp;os, <a class="code" href="class_node.html">Node<\/a> &amp;node);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;};<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#endif <\/span><span class="comment">\/* NODE_HPP_ *\/<\/span><span class="preprocessor"><\/span><\/div><div class="ttc" id="class_node_html_a2e44beccfdf3e40fb7bbb251c2969745"><div class="ttname"><a href="class_node.html#a2e44beccfdf3e40fb7bbb251c2969745">Node::coordinates_radians<\/a><\/div><div class="ttdeci">coordinates_t coordinates_radians<\/div><div class="ttdef"><b>Definition:<\/b> Node.hpp:19<\/div><\/div>$/;"	a
l00001	doxygen/html/_query_file_parser_8hpp_source.html	/^<a href="_query_file_parser_8hpp.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef QUERYFILEPARSER_HPP_<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define QUERYFILEPARSER_HPP_<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;tuple&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/property_tree\/ptree.hpp&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;boost\/property_tree\/json_parser.hpp&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">using<\/span> std::string;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">using<\/span> std::tuple;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno"><a class="line" href="class_query_file_parser.html">   17<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="class_query_file_parser.html">QueryFileParser<\/a> {<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00019"><\/a><span class="lineno"><a class="line" href="class_query_file_parser.html#a4232b69808897d95c2945d1d3bdd1d69">   19<\/a><\/span>&#160;  <span class="keyword">enum class<\/span> <a class="code" href="class_query_file_parser.html#a4232b69808897d95c2945d1d3bdd1d69">Field<\/a> { <a class="code" href="class_query_file_parser.html#a4232b69808897d95c2945d1d3bdd1d69ae6b391a8d2c4d45902a23a8b6585703d">URL<\/a> = 0 };<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;  <a class="code" href="class_query_file_parser.html#ad92fa87e659196b83b60a3facbcc4583">QueryFileParser<\/a>(<span class="keywordtype">string<\/span> <a class="code" href="class_query_file_parser.html#ae0d3fe1f7eb2a89eb232eae476f74c04">query_file<\/a>);<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;  <span class="keyword">template<\/span> &lt;QueryFileParser::Field F&gt;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;  <span class="keyword">auto<\/span>&amp; <span class="keyword">get<\/span>();<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="class_query_file_parser.html#a9c9a2a3e7495fa505569a75b03bcc05a">parse<\/a>();<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160; <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00028"><\/a><span class="lineno"><a class="line" href="class_query_file_parser.html#adda9f64d08a57818655f0590bc990ee3">   28<\/a><\/span>&#160;  <span class="keyword">using<\/span> <a class="code" href="class_query_file_parser.html#adda9f64d08a57818655f0590bc990ee3">tuple_t<\/a> = tuple&lt;string&gt;;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno"><a class="line" href="class_query_file_parser.html#ae0d3fe1f7eb2a89eb232eae476f74c04">   29<\/a><\/span>&#160;  <span class="keywordtype">string<\/span> <a class="code" href="class_query_file_parser.html#ae0d3fe1f7eb2a89eb232eae476f74c04">query_file<\/a>;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno"><a class="line" href="class_query_file_parser.html#aa680104928b9d0beb2eff860cdfd3276">   30<\/a><\/span>&#160;  <a class="code" href="class_query_file_parser.html#adda9f64d08a57818655f0590bc990ee3">tuple_t<\/a> <a class="code" href="class_query_file_parser.html#aa680104928b9d0beb2eff860cdfd3276">my_tuple<\/a>;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  <span class="keyword">template<\/span> &lt;QueryFileParser::Field F, <span class="keyword">typename<\/span> Value&gt;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;  <span class="keywordtype">void<\/span> <span class="keyword">set<\/span>(Value value);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;};<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">using<\/span> boost::property_tree::ptree;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">using<\/span> std::ifstream;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="class_query_file_parser.html#ad92fa87e659196b83b60a3facbcc4583">   39<\/a><\/span>&#160;<a class="code" href="class_query_file_parser.html#ad92fa87e659196b83b60a3facbcc4583">QueryFileParser::QueryFileParser<\/a>(<span class="keywordtype">string<\/span> query_file_) : <a class="code" href="class_query_file_parser.html#ae0d3fe1f7eb2a89eb232eae476f74c04">query_file<\/a>{query_file_} {<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;  <span class="keywordflow">if<\/span> (<a class="code" href="class_query_file_parser.html#ae0d3fe1f7eb2a89eb232eae476f74c04">query_file<\/a>.empty()) {<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keywordflow">throw<\/span> std::invalid_argument(<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="stringliteral">&quot;QueryFileParser expecting a valid: query_file.&quot;<\/span>);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;  }<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;}<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno"><a class="line" href="class_query_file_parser.html#a9c9a2a3e7495fa505569a75b03bcc05a">   46<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="class_query_file_parser.html#a9c9a2a3e7495fa505569a75b03bcc05a">QueryFileParser::parse<\/a>() {<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;  ifstream file{this-&gt;<a class="code" href="class_query_file_parser.html#ae0d3fe1f7eb2a89eb232eae476f74c04">query_file<\/a>.c_str()};<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;  file.exceptions(std::ifstream::failbit | std::ifstream::badbit);<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;  <span class="keywordflow">if<\/span> (file.is_open()) {<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    ptree treePointer;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    read_json(file, treePointer);<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keywordtype">string<\/span> holder =<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        treePointer.get&lt;<span class="keywordtype">string<\/span>&gt;(<span class="stringliteral">&quot;location&quot;<\/span>) + treePointer.get&lt;<span class="keywordtype">string<\/span>&gt;(<span class="stringliteral">&quot;query&quot;<\/span>);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    this-&gt;set&lt;QueryFileParser::Field::URL&gt;(holder);<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    file.close();<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;  }<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;}<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="keyword">template<\/span> &lt;QueryFileParser::Field F&gt;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno"><a class="line" href="class_query_file_parser.html#a3cfb0d7f99df7f8445eaa3053307d401">   64<\/a><\/span>&#160;<span class="keyword">auto<\/span>&amp; <a class="code" href="class_query_file_parser.html#a3cfb0d7f99df7f8445eaa3053307d401">QueryFileParser::get<\/a>() {<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  <span class="keywordflow">return<\/span> std::get&lt;static_cast&lt;std::underlying_type_t&lt;QueryFileParser::Field&gt;&gt;(<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;      F)&gt;(this-&gt;<a class="code" href="class_query_file_parser.html#aa680104928b9d0beb2eff860cdfd3276">my_tuple<\/a>);<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;}<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="keyword">template<\/span> &lt;QueryFileParser::Field F, <span class="keyword">typename<\/span> Value&gt;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno"><a class="line" href="class_query_file_parser.html#a1268f720a9cd796f3355c44be0a32346">   70<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="class_query_file_parser.html#a1268f720a9cd796f3355c44be0a32346">QueryFileParser::set<\/a>(Value value) {<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  std::get&lt;static_cast&lt;std::underlying_type_t&lt;QueryFileParser::Field&gt;&gt;(F)&gt;(<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;      this-&gt;<a class="code" href="class_query_file_parser.html#aa680104928b9d0beb2eff860cdfd3276">my_tuple<\/a>) = value;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;}<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor">#endif <\/span><span class="comment">\/* QUERYFILEPARSER_HPP_ *\/<\/span><span class="preprocessor"><\/span><\/div><div class="ttc" id="class_query_file_parser_html_a1268f720a9cd796f3355c44be0a32346"><div class="ttname"><a href="class_query_file_parser.html#a1268f720a9cd796f3355c44be0a32346">QueryFileParser::set<\/a><\/div><div class="ttdeci">void set(Value value)<\/div><div class="ttdef"><b>Definition:<\/b> QueryFileParser.hpp:70<\/div><\/div>$/;"	a
l00001	doxygen/html/_road_8hpp_source.html	/^<a href="_road_8hpp.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef ROAD_HPP_<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define ROAD_HPP_<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;memory&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">using<\/span> std::string;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">using<\/span> std::ostream;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">using<\/span> std::unique_ptr;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno"><a class="line" href="class_road.html">   11<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="class_road.html">Road<\/a> {<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160; <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00013"><\/a><span class="lineno"><a class="line" href="class_road.html#ad48dada3f977c214f7216ef927deab6a">   13<\/a><\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> <a class="code" href="class_road.html#ad48dada3f977c214f7216ef927deab6a">id<\/a>;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno"><a class="line" href="class_road.html#a56593cbf0ce30704dfc3b5488c3a4d79">   14<\/a><\/span>&#160;  unique_ptr&lt;string&gt; <a class="code" href="class_road.html#a56593cbf0ce30704dfc3b5488c3a4d79">name<\/a>;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno"><a class="line" href="class_road.html#a5129ee6154fda5d1cdfcc59bf18d39ce">   15<\/a><\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="class_road.html#a5129ee6154fda5d1cdfcc59bf18d39ce">is_two_way<\/a>;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  <a class="code" href="class_road.html#a9229f8276f496ed09c9415065d6333d4">Road<\/a>(<span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> id_, unique_ptr&lt;string&gt; name, <span class="keywordtype">bool<\/span> is_two_way);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="class_road.html#aacb68bd631ad41ec5b25b4dd118e698e">operator==<\/a>(<span class="keyword">const<\/span> <a class="code" href="class_road.html">Road<\/a> &amp;otherRoad) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;  <span class="keyword">friend<\/span> ostream &amp;<a class="code" href="class_road.html#af6fb6c1ab8280cf97a11111713e7b96b">operator&lt;&lt;<\/a>(ostream &amp;os, <a class="code" href="class_road.html">Road<\/a> &amp;road);<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;  <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> <a class="code" href="class_road.html#a84f61dac3ec767c0822207a710282a56">getId<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="class_road.html#a6a1b16571a08fc381d07ba4d996886d9">isTwoWay<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;};<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#endif <\/span><span class="comment">\/* ROAD_HPP_ *\/<\/span><span class="preprocessor"><\/span><\/div><div class="ttc" id="class_road_html_a56593cbf0ce30704dfc3b5488c3a4d79"><div class="ttname"><a href="class_road.html#a56593cbf0ce30704dfc3b5488c3a4d79">Road::name<\/a><\/div><div class="ttdeci">unique_ptr&lt; string &gt; name<\/div><div class="ttdef"><b>Definition:<\/b> Road.hpp:14<\/div><\/div>$/;"	a
l00001	doxygen/html/_subroad_8hpp_source.html	/^<a href="_subroad_8hpp.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef SUBROAD_HPP<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define SUBROAD_HPP<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ostream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">using<\/span> std::ostream;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno"><a class="line" href="class_subroad.html">    8<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="class_subroad.html">Subroad<\/a> {<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160; <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00010"><\/a><span class="lineno"><a class="line" href="class_subroad.html#a230fa7b9b1c879d9c3ba93d7f656a3e6">   10<\/a><\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> <a class="code" href="class_subroad.html#a230fa7b9b1c879d9c3ba93d7f656a3e6">id_road<\/a>;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno"><a class="line" href="class_subroad.html#a70ff0f520c0a3ac1617b3eb0c1733fd4">   11<\/a><\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> <a class="code" href="class_subroad.html#a70ff0f520c0a3ac1617b3eb0c1733fd4">id_node_source<\/a>;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno"><a class="line" href="class_subroad.html#a030534edaeae534db0751a301dfc63a2">   12<\/a><\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> <a class="code" href="class_subroad.html#a030534edaeae534db0751a301dfc63a2">id_node_destination<\/a>;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;  <span class="keyword">using<\/span> <a class="code" href="class_subroad.html#a6284ea7b1ea686b5add50d6bf2129af3">segment_t<\/a> = <span class="keyword">struct <\/span>{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno"><a class="line" href="class_subroad.html#a6284ea7b1ea686b5add50d6bf2129af3">   16<\/a><\/span>&#160;    <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> source;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno"><a class="line" href="class_subroad.html#a594a9dfe307540f0b76591cab4953e67">   17<\/a><\/span>&#160;    <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> <a class="code" href="class_subroad.html#a594a9dfe307540f0b76591cab4953e67">destination<\/a>;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  };<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;  <a class="code" href="class_subroad.html#af43f19fd6188660ad99b8c2be2f06550">Subroad<\/a>(<span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> id_road_, <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> node_src,<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;          <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> node_dest);<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="class_subroad.html#a3289b523e8629a59e06d39152aab71c5">operator==<\/a>(<span class="keyword">const<\/span> <a class="code" href="class_subroad.html">Subroad<\/a> &amp;otherSubroad) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;  <span class="keyword">friend<\/span> ostream &amp;<a class="code" href="class_subroad.html#a8f86e16559bef313a3739b39a82dfcc9">operator&lt;&lt;<\/a>(ostream &amp;os, <a class="code" href="class_subroad.html">Subroad<\/a> &amp;subroad);<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;  <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> <a class="code" href="class_subroad.html#aa39fbf5cba22d0c3e80479e62fff160d">getRoad<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="class_subroad.html#a2cdbff9096fa9be9aa92e498b2fc0095">getNodesId<\/a>(<a class="code" href="class_subroad.html#a6284ea7b1ea686b5add50d6bf2129af3">Subroad::segment_t<\/a> &amp;) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> <a class="code" href="class_subroad.html#a9e156dd287c567f88f8f9711703c69da">getRoadId<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;};<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">#endif <\/span><span class="comment">\/* SUBROAD_HPP *\/<\/span><span class="preprocessor"><\/span><\/div><div class="ttc" id="class_subroad_html_a2cdbff9096fa9be9aa92e498b2fc0095"><div class="ttname"><a href="class_subroad.html#a2cdbff9096fa9be9aa92e498b2fc0095">Subroad::getNodesId<\/a><\/div><div class="ttdeci">void getNodesId(Subroad::segment_t &amp;) const <\/div><div class="ttdef"><b>Definition:<\/b> Subroad.cpp:17<\/div><\/div>$/;"	a
l00001	doxygen/html/_txt_map_parser_8hpp_source.html	/^<a href="_txt_map_parser_8hpp.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef TXTMAPPARSER_HPP_<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define TXTMAPPARSER_HPP_<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;memory&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_node_8hpp.html">Node.hpp<\/a>&quot;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_road_8hpp.html">Road.hpp<\/a>&quot;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_subroad_8hpp.html">Subroad.hpp<\/a>&quot;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">using<\/span> std::string;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">using<\/span> std::vector;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">using<\/span> std::unordered_map;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">using<\/span> std::unique_ptr;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">using<\/span> std::shared_ptr;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">using<\/span> std::make_unique;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">using<\/span> std::make_shared;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="class_txt_map_parser.html">   21<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="class_txt_map_parser.html">TxtMapParser<\/a> {<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;  <span class="keyword">using<\/span> <a class="code" href="class_txt_map_parser.html#a7732506adc053a6ad08ea65e6f5d5424">txt_parsed_t<\/a> = <span class="keyword">struct <\/span>{<\/div><div class="line"><a name="l00024"><\/a><span class="lineno"><a class="line" href="class_txt_map_parser.html#a7732506adc053a6ad08ea65e6f5d5424">   24<\/a><\/span>&#160;    unordered_map&lt;long long int, Node *&gt; nodes_umap;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno"><a class="line" href="class_txt_map_parser.html#af54940b46bda2e4ca4a115c2fc82a786">   25<\/a><\/span>&#160;    unordered_map&lt;long long int, Road *&gt; <a class="code" href="class_txt_map_parser.html#af54940b46bda2e4ca4a115c2fc82a786">roads_umap<\/a>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno"><a class="line" href="class_txt_map_parser.html#a157e2a29388c05f7bfb7b73767551a4a">   26<\/a><\/span>&#160;    vector&lt;Subroad *&gt; <a class="code" href="class_txt_map_parser.html#a157e2a29388c05f7bfb7b73767551a4a">subroads_vector<\/a>;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno"><a class="line" href="class_txt_map_parser.html#a0b43b3a584757f0f5ee9b7b6c7329096">   27<\/a><\/span>&#160;  };<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160; <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  <span class="keywordtype">string<\/span> <span class="keyword">const<\/span> *<span class="keyword">const<\/span> <a class="code" href="class_txt_map_parser.html#a0b43b3a584757f0f5ee9b7b6c7329096">nodes_file_path<\/a>;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno"><a class="line" href="class_txt_map_parser.html#a223d743e38411da9309c61d768c15701">   31<\/a><\/span>&#160;  <span class="keywordtype">string<\/span> <span class="keyword">const<\/span> *<span class="keyword">const<\/span> <a class="code" href="class_txt_map_parser.html#a223d743e38411da9309c61d768c15701">roads_file_path<\/a>;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno"><a class="line" href="class_txt_map_parser.html#ac4ae6bb7327ab176e07a46f9909814ef">   32<\/a><\/span>&#160;  <span class="keywordtype">string<\/span> <span class="keyword">const<\/span> *<span class="keyword">const<\/span> <a class="code" href="class_txt_map_parser.html#ac4ae6bb7327ab176e07a46f9909814ef">subroads_file_path<\/a>;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno"><a class="line" href="class_txt_map_parser.html#a7709ddc352a687b0c794d417c1be1252">   33<\/a><\/span>&#160;  <a class="code" href="class_txt_map_parser.html#a7732506adc053a6ad08ea65e6f5d5424">txt_parsed_t<\/a> <a class="code" href="class_txt_map_parser.html#a7709ddc352a687b0c794d417c1be1252">parsed<\/a>;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;  <a class="code" href="class_txt_map_parser.html#a2b3cf158054c6bf70673046d376df55d">TxtMapParser<\/a>(<span class="keywordtype">string<\/span> <span class="keyword">const<\/span> *<span class="keyword">const<\/span> nodes_file_path_,<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;               <span class="keywordtype">string<\/span> <span class="keyword">const<\/span> *<span class="keyword">const<\/span> roads_file_path_,<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;               <span class="keywordtype">string<\/span> <span class="keyword">const<\/span> *<span class="keyword">const<\/span> subroads_file_path_);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  <a class="code" href="class_txt_map_parser.html#a96c2f82b6c8807fae919a419b9a8a037">~TxtMapParser<\/a>();<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="class_txt_map_parser.html#aaf2ea97037ab16534203b0134cabf240">parse_nodes<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="class_txt_map_parser.html#a8cfcdaf4c71ad04d5214ff8f6a8d4e57">parse_roads<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="class_txt_map_parser.html#a3a0c9d28bc3a59da9ae8d3afe6f46266">parse_subroads<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;  <a class="code" href="class_txt_map_parser.html#a7732506adc053a6ad08ea65e6f5d5424">txt_parsed_t<\/a> <a class="code" href="class_txt_map_parser.html#a0344368f5abfc7f1082e9a6009d4b063">parse<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;};<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#endif <\/span><span class="comment">\/* TXTMAPPARSER_HPP_ *\/<\/span><span class="preprocessor"><\/span><\/div><div class="ttc" id="class_txt_map_parser_html_aaf2ea97037ab16534203b0134cabf240"><div class="ttname"><a href="class_txt_map_parser.html#aaf2ea97037ab16534203b0134cabf240">TxtMapParser::parse_nodes<\/a><\/div><div class="ttdeci">void parse_nodes(void)<\/div><div class="ttdef"><b>Definition:<\/b> TxtMapParser.cpp:23<\/div><\/div>$/;"	a
l00001	doxygen/html/_web_fetch_8hpp_source.html	/^<a href="_web_fetch_8hpp.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef WEBFETCH_HPP_<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define WEBFETCH_HPP_<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno"><a class="line" href="class_web_fetch.html">    8<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="class_web_fetch.html">WebFetch<\/a> {<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160; <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00010"><\/a><span class="lineno"><a class="line" href="class_web_fetch.html#a584ecf45c07741a1a6e6ffab5733b660">   10<\/a><\/span>&#160;  <span class="keywordtype">string<\/span> <a class="code" href="class_web_fetch.html#a584ecf45c07741a1a6e6ffab5733b660">url<\/a>;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno"><a class="line" href="class_web_fetch.html#a755a751e64c6559f391615ce933938a4">   11<\/a><\/span>&#160;  <span class="keywordtype">string<\/span> <a class="code" href="class_web_fetch.html#a755a751e64c6559f391615ce933938a4">output_file<\/a>;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno"><a class="line" href="class_web_fetch.html#a474f02a10773fa0a08f4372cb92b7924">   14<\/a><\/span>&#160;  <span class="keyword">enum class<\/span> <a class="code" href="class_web_fetch.html#a474f02a10773fa0a08f4372cb92b7924">Returns<\/a> { FETCH_SUCCESS = 0, FETCH_NO_OVERWRITE };<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;  <a class="code" href="class_web_fetch.html">WebFetch<\/a>(<span class="keywordtype">string<\/span> url, <span class="keywordtype">string<\/span> output_file);<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;  <a class="code" href="class_web_fetch.html#a474f02a10773fa0a08f4372cb92b7924">Returns<\/a> fetch();<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;};<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#endif <\/span><span class="comment">\/* WEBFETCH_HPP_ *\/<\/span><span class="preprocessor"><\/span><\/div><div class="ttc" id="namespacestd_html"><div class="ttname"><a href="namespacestd.html">std<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CommandLineParser.hpp:13<\/div><\/div>$/;"	a
l00001	doxygen/html/app_8hpp_source.html	/^<a href="app_8hpp.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef APP_HPP_<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define APP_HPP_<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">using<\/span> std::string;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno"><a class="line" href="namespaceapp.html">    8<\/a><\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceapp.html">app<\/a> {<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="namespaceapp_1_1defaults.html">    9<\/a><\/span>&#160;<span class="keyword">namespace <\/span>defaults {<\/div><div class="line"><a name="l00010"><\/a><span class="lineno"><a class="line" href="namespaceapp_1_1defaults.html#abfe8f3750ec36a39c7406010b73d0bd1">   10<\/a><\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">string<\/span> <a class="code" href="namespaceapp_1_1defaults.html#abfe8f3750ec36a39c7406010b73d0bd1">graph_file<\/a> = <span class="stringliteral">&quot;graph.out&quot;<\/span>;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;}<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;}<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#endif <\/span><span class="comment">\/* APP_HPP_ *\/<\/span><span class="preprocessor"><\/span><\/div><div class="ttc" id="namespaceapp_html"><div class="ttname"><a href="namespaceapp.html">app<\/a><\/div><div class="ttdef"><b>Definition:<\/b> app.hpp:8<\/div><\/div>$/;"	a
l00001	doxygen/html/graph_legend.html	/^<p>Consider the following example: <\/p><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;\/*! Invisible class because of truncation *\/<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;class Invisible { };<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;\/*! Truncated class, inheritance relation is hidden *\/<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;class Truncated : public Invisible { };<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;\/* Class not documented with doxygen comments *\/<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;class Undocumented { };<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;\/*! Class that is inherited using public inheritance *\/<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;class PublicBase : public Truncated { };<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;\/*! A template class *\/<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;template&lt;class T&gt; class Templ { };<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;\/*! Class that is inherited using protected inheritance *\/<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;class ProtectedBase { };<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;\/*! Class that is inherited using private inheritance *\/<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;class PrivateBase { };<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;\/*! Class that is used by the Inherited class *\/<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;class Used { };<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;\/*! Super class that inherits a number of other classes *\/<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;class Inherited : public PublicBase,<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;                  protected ProtectedBase,<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;                  private PrivateBase,<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;                  public Undocumented,<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;                  public Templ&lt;int&gt;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;{<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  private:<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    Used *m_usedClass;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;};<\/div><\/div><!-- fragment --><p> This will result in the following graph:<\/p>$/;"	a
letter_C	doxygen/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_C"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;C&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_E	doxygen/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_E"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;E&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_G	doxygen/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_G"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;G&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_N	doxygen/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_N"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;N&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_Q	doxygen/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_Q"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;Q&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_R	doxygen/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_R"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;R&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_S	doxygen/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_S"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;S&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_T	doxygen/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_T"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;T&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_V	doxygen/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_V"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;V&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_W	doxygen/html/classes.html	/^<tr><td valign="top"><a class="el" href="class_command_line_parser.html">CommandLineParser<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="class_node.html">Node<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="class_subroad.html">Subroad<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_W"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;W&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_h	doxygen/html/classes.html	/^<tr><td valign="top"><a class="el" href="class_edge.html">Edge<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="class_query_file_parser.html">QueryFileParser<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="class_txt_map_parser.html">TxtMapParser<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_h"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;h&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
localStorageSupported	doxygen/html/navtree.js	/^function localStorageSupported()$/;"	f
longitude	src/Node.hpp	/^    double longitude;$/;"	m	class:Node
main	src/app.cpp	/^int main(int argc, char *argv[]) {$/;"	f
maptxtfiles_long	src/CommandLineParser.cpp	/^static const string maptxtfiles_long = "--maptxtfiles";$/;"	v	file:
maptxtfiles_short	src/CommandLineParser.cpp	/^static const string maptxtfiles_short = "-mtf";$/;"	v	file:
maxZoom	doxygen/html/svgpan.js	/^var maxZoom;$/;"	v
minZoom	doxygen/html/svgpan.js	/^var minZoom;$/;"	v
my_tuple	src/QueryFileParser.hpp	/^  tuple_t my_tuple;$/;"	m	class:QueryFileParser::Field
naive	src/StringAlgorithms.cpp	/^int StringAlgorithms::naive(const string pattern, const string text) {$/;"	f	class:StringAlgorithms
naiveAlternative	src/StringAlgorithms.cpp	/^int StringAlgorithms::naiveAlternative(const string pattern,$/;"	f	class:StringAlgorithms
name	src/Road.hpp	/^  unique_ptr<string> name;$/;"	m	class:Road
namespaceapp	doxygen/html/namespaceapp.js	/^var namespaceapp =$/;"	v
namespaces	doxygen/html/_command_line_parser_8hpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"><\/a>$/;"	a
namespaces	doxygen/html/app_8hpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"><\/a>$/;"	a
namespaces	doxygen/html/namespaceapp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"><\/a>$/;"	a
namespaces	doxygen/html/namespaces.js	/^var namespaces =$/;"	v
namespacestd	doxygen/html/namespacestd.js	/^var namespacestd =$/;"	v
navTo	doxygen/html/navtree.js	/^function navTo(o,root,hash,relpath)$/;"	f
nested-classes	doxygen/html/_command_line_parser_8hpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen/html/_graph_8hpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen/html/_node_8hpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen/html/_query_file_parser_8hpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen/html/_road_8hpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen/html/_subroad_8hpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen/html/_txt_map_parser_8hpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen/html/_web_fetch_8hpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen/html/namespacestd.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
newNode	doxygen/html/navtree.js	/^function newNode(o, po, text, link, childrenData, lastNode)$/;"	f
node.expandToggle.onclick	doxygen/html/navtree.js	/^    node.expandToggle.onclick = function() {$/;"	f
node.getChildrenUL	doxygen/html/navtree.js	/^  node.getChildrenUL = function() {$/;"	f
nodes_file_path	src/TxtMapParser.hpp	/^  string const *const nodes_file_path;$/;"	v
numCycles	src/Graph.hpp	/^  int numCycles;$/;"	m	class:Graph
o.node.getChildrenUL	doxygen/html/navtree.js	/^  o.node.getChildrenUL = function() { return o.node.childrenUL; };$/;"	f
operator ()	src/CommandLineParser.hpp	/^  inline typename std::enable_if_t<std::is_enum<E>::value, int> operator()($/;"	f	struct:std::hash
operator ()	src/Graph.hpp	/^  bool operator()(Vertex<T> const* const lVertex,$/;"	f	struct:VertexCostGreaterThan
operator ()	src/Graph.hpp	/^  bool operator()(Vertex<T> const* const lhs,$/;"	f	struct:VertexSetGreaterThan
operator <	src/Graph.hpp	/^bool Edge<T>::operator<(const Edge<T>& otherEdge) const {$/;"	f	class:Edge
operator <	src/Graph.hpp	/^bool Vertex<T>::operator<(const Vertex<T>& vertex) const {$/;"	f	class:Vertex
operator <	src/Node.cpp	/^bool Node::operator<(const Node &otherNode) const {$/;"	f	class:Node
operator <<	src/Node.cpp	/^ostream &operator<<(ostream &os, Node &node) {$/;"	f
operator <<	src/Road.cpp	/^ostream &operator<<(ostream &os, Road &road) {$/;"	f
operator <<	src/Subroad.cpp	/^ostream &operator<<(ostream &os, Subroad &subroad) {$/;"	f
operator ==	src/Graph.hpp	/^bool Vertex<T>::operator==(const Vertex<T>& vertex) const {$/;"	f	class:Vertex
operator ==	src/Node.cpp	/^bool Node::operator==(const Node &otherNode) const {$/;"	f	class:Node
operator ==	src/Road.cpp	/^bool Road::operator==(const Road &otherRoad) const {$/;"	f	class:Road
operator ==	src/Subroad.cpp	/^bool Subroad::operator==(const Subroad &otherSubroad) const {$/;"	f	class:Subroad
os	.ycm_extra_conf.py	/^import os$/;"	i
output_file	src/WebFetch.hpp	/^  string output_file;$/;"	m	class:WebFetch
parse	src/CommandLineParser.cpp	/^void CommandLineParser::parse(unordered_map<Options, string> &options) {$/;"	f	class:CommandLineParser
parse	src/QueryFileParser.hpp	/^void QueryFileParser::parse() {$/;"	f	class:QueryFileParser::QueryFileParser
parse	src/TxtMapParser.cpp	/^TxtMapParser::txt_parsed_t TxtMapParser::parse(void) {$/;"	f	class:TxtMapParser
parse_nodes	src/TxtMapParser.cpp	/^void TxtMapParser::parse_nodes(void) {$/;"	f	class:TxtMapParser
parse_roads	src/TxtMapParser.cpp	/^void TxtMapParser::parse_roads(void) {$/;"	f	class:TxtMapParser
parse_subroads	src/TxtMapParser.cpp	/^void TxtMapParser::parse_subroads(void) {$/;"	f	class:TxtMapParser
parsed	src/TxtMapParser.hpp	/^  txt_parsed_t parsed;$/;"	v
pathName	doxygen/html/navtree.js	/^function pathName()$/;"	f
pri-attribs	doxygen/html/class_command_line_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen/html/class_edge.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen/html/class_graph.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen/html/class_node.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen/html/class_query_file_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen/html/class_road.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen/html/class_subroad.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen/html/class_txt_map_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen/html/class_vertex.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen/html/class_web_fetch.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-methods	doxygen/html/class_command_line_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"><\/a>$/;"	a
pri-methods	doxygen/html/class_graph.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"><\/a>$/;"	a
pri-methods	doxygen/html/class_query_file_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"><\/a>$/;"	a
pri-types	doxygen/html/class_node.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-types"><\/a>$/;"	a
pri-types	doxygen/html/class_query_file_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-types"><\/a>$/;"	a
pub-attribs	doxygen/html/class_subroad.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doxygen/html/class_txt_map_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-methods	doxygen/html/class_command_line_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen/html/class_edge.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen/html/class_graph.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen/html/class_node.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen/html/class_query_file_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen/html/class_road.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen/html/class_subroad.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen/html/class_txt_map_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen/html/class_vertex.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen/html/class_web_fetch.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen/html/struct_vertex_cost_greater_than.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen/html/struct_vertex_set_greater_than.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen/html/structstd_1_1hash.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-types	doxygen/html/class_command_line_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen/html/class_graph.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen/html/class_query_file_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen/html/class_subroad.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen/html/class_txt_map_parser.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen/html/class_vertex.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen/html/class_web_fetch.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
queryfile_long	src/CommandLineParser.cpp	/^static const string queryfile_long = "--queryfile";$/;"	v	file:
queryfile_short	src/CommandLineParser.cpp	/^static const string queryfile_short = "-qf";$/;"	v	file:
readCookie	doxygen/html/resize.js	/^function readCookie(cookie) $/;"	f
removeEdge	src/Graph.hpp	/^bool Graph<T>::removeEdge(const T& in_origin, const T& in_target) {$/;"	f	class:Graph
removeEdgeTo	src/Graph.hpp	/^bool Vertex<T>::removeEdgeTo(Vertex<T> const* const otherVertex) {$/;"	f	class:Vertex
removeToInsertLater	doxygen/html/navtree.js	/^function removeToInsertLater(element) {$/;"	f
removeVertex	src/Graph.hpp	/^bool Graph<T>::removeVertex(const T& in) {$/;"	f	class:Graph
resizeHeight	doxygen/html/resize.js	/^function resizeHeight() $/;"	f
resizeWidth	doxygen/html/resize.js	/^function resizeWidth() $/;"	f
restoreWidth	doxygen/html/resize.js	/^function restoreWidth(navWidth)$/;"	f
roads_file_path	src/TxtMapParser.hpp	/^  string const *const roads_file_path;$/;"	v
root	doxygen/html/svgpan.js	/^var root = document.documentElement;$/;"	v
save_overpass_map_query	src/app.cpp	/^static void save_overpass_map_query(string &map_shortest_result,$/;"	f	file:
script.onreadystatechange	doxygen/html/navtree.js	/^    script.onreadystatechange = function() {$/;"	f
searchData	doxygen/html/search/all_0.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_1.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_10.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_11.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_12.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_13.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_14.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_15.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_2.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_3.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_4.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_5.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_6.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_7.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_8.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_9.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_a.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_b.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_c.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_d.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_e.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/all_f.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/classes_0.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/classes_1.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/classes_2.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/classes_3.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/classes_4.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/classes_5.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/classes_6.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/classes_7.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/classes_8.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/classes_9.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/classes_a.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/enums_0.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/enums_1.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/enums_2.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/enumvalues_0.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/enumvalues_1.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/enumvalues_2.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/enumvalues_3.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/files_0.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/files_1.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/files_2.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/files_3.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/files_4.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/files_5.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/files_6.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/files_7.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/files_8.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_0.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_1.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_10.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_11.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_12.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_13.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_2.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_3.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_4.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_5.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_6.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_7.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_8.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_9.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_a.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_b.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_c.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_d.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_e.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/functions_f.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/namespaces_0.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/namespaces_1.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/related_0.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/related_1.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/related_2.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/typedefs_0.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/typedefs_1.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/typedefs_2.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/typedefs_3.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/typedefs_4.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_0.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_1.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_10.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_11.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_12.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_13.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_2.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_3.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_4.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_5.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_6.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_7.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_8.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_9.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_a.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_b.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_c.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_d.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_e.js	/^var searchData=$/;"	v
searchData	doxygen/html/search/variables_f.js	/^var searchData=$/;"	v
selectAndHighlight	doxygen/html/navtree.js	/^function selectAndHighlight(hash,n)$/;"	f
serializeXmlNode	doxygen/html/svgpan.js	/^function serializeXmlNode(xmlNode) $/;"	f
set	src/QueryFileParser.hpp	/^void QueryFileParser::set(Value value) {$/;"	f	class:QueryFileParser::QueryFileParser
setAttributes	doxygen/html/svgpan.js	/^function setAttributes(element, attributes)$/;"	f
setCTM	doxygen/html/svgpan.js	/^function setCTM(element, matrix) $/;"	f
setClassAttr	doxygen/html/search/search.js	/^function setClassAttr(elem,attr)$/;"	f
setKeyActions	doxygen/html/search/search.js	/^function setKeyActions(elem,action)$/;"	f
showNode	doxygen/html/navtree.js	/^function showNode(o, node, index, hash)$/;"	f
showRoot	doxygen/html/navtree.js	/^function showRoot()$/;"	f
showSyncOff	doxygen/html/navtree.js	/^function showSyncOff(n,relpath)$/;"	f
showSyncOn	doxygen/html/navtree.js	/^function showSyncOn(n,relpath)$/;"	f
sidenav	doxygen/html/resize.js	/^var sidenav,navtree,content,header;$/;"	v
state	doxygen/html/svgpan.js	/^var state = 'none';$/;"	v
stateOrigin	doxygen/html/svgpan.js	/^var stateOrigin;$/;"	v
stateTf	doxygen/html/svgpan.js	/^var stateTf = root.createSVGMatrix();$/;"	v
std	src/CommandLineParser.hpp	/^namespace std {$/;"	n
storeLink	doxygen/html/navtree.js	/^function storeLink(link)$/;"	f
stripPath	doxygen/html/navtree.js	/^function stripPath(uri)$/;"	f
stripPath2	doxygen/html/navtree.js	/^function stripPath2(uri)$/;"	f
struct_vertex_cost_greater_than	doxygen/html/struct_vertex_cost_greater_than.js	/^var struct_vertex_cost_greater_than =$/;"	v
struct_vertex_set_greater_than	doxygen/html/struct_vertex_set_greater_than.js	/^var struct_vertex_set_greater_than =$/;"	v
structstd_1_1hash	doxygen/html/structstd_1_1hash.js	/^var structstd_1_1hash =$/;"	v
subroad	src/Graph.hpp	/^  Subroad* subroad;$/;"	m	class:Edge
subroads_file_path	src/TxtMapParser.hpp	/^  string const *const subroads_file_path;$/;"	v
subroads_vector	src/TxtMapParser.hpp	/^    vector<Subroad *> subroads_vector;$/;"	m	class:TxtMapParser
svgDoc	doxygen/html/svgpan.js	/^var svgDoc;$/;"	v
target	src/Graph.hpp	/^  Vertex<T>* target;$/;"	m	class:Edge
toggleFolder	doxygen/html/dynsections.js	/^function toggleFolder(id)$/;"	f
toggleInherit	doxygen/html/dynsections.js	/^function toggleInherit(id)$/;"	f
toggleLevel	doxygen/html/dynsections.js	/^function toggleLevel(level)$/;"	f
toggleSyncButton	doxygen/html/navtree.js	/^function toggleSyncButton(relpath)$/;"	f
toggleVisibility	doxygen/html/dynsections.js	/^function toggleVisibility(linkObj)$/;"	f
updateStripes	doxygen/html/dynsections.js	/^function updateStripes()$/;"	f
url	src/WebFetch.hpp	/^  string url;$/;"	m	class:WebFetch
var-members	doxygen/html/_command_line_parser_8cpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"><\/a>$/;"	a
var-members	doxygen/html/app_8hpp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"><\/a>$/;"	a
var-members	doxygen/html/namespaceapp_1_1defaults.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"><\/a>$/;"	a
vertexSet	src/Graph.hpp	/^  VertexSet_t vertexSet;$/;"	m	class:Graph
visited	src/Graph.hpp	/^  bool visited;$/;"	m	class:Vertex
weight	src/Graph.hpp	/^  double weight;$/;"	m	class:Edge
window.onresize	doxygen/html/svgpan.js	/^window.onresize=function()$/;"	f
windowHeight	doxygen/html/svgpan.js	/^var windowHeight;$/;"	v
windowWidth	doxygen/html/svgpan.js	/^var windowWidth;$/;"	v
writeCookie	doxygen/html/resize.js	/^function writeCookie(cookie, val, expiration) $/;"	f
ycm_core	.ycm_extra_conf.py	/^import ycm_core$/;"	i
zoomInFactor	doxygen/html/svgpan.js	/^var zoomInFactor;$/;"	v
zoomOutFactor	doxygen/html/svgpan.js	/^var zoomOutFactor;$/;"	v
zoomSteps	doxygen/html/svgpan.js	/^var zoomSteps = 10;$/;"	v
~TxtMapParser	src/TxtMapParser.cpp	/^TxtMapParser::~TxtMapParser() {$/;"	f	class:TxtMapParser
